#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–∑—Ü–∞ 55
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á–µ–º—É —Ç–µ—Ä—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ OriginalSampleNumber
"""

import os
import sys
import django
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'strain_tracker_project.settings')
django.setup()

from collection_manager.schemas import ImportSampleSchema
from scripts.import_data import validate_csv_row

def debug_sample_55():
    """–û—Ç–ª–∞–¥–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–∑—Ü–∞ 55"""
    
    # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    csv_file = "../data/Samples_Table.csv"
    df = pd.read_csv(csv_file)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—Ä–∞–∑—Ü–æ–º 55
    sample_55_row = df[df['SampleRowID'] == 55]
    
    if sample_55_row.empty:
        print("‚ùå –û–±—Ä–∞–∑–µ—Ü 55 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CSV —Ñ–∞–π–ª–µ")
        return
    
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–∑—Ü–∞ 55")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    row = sample_55_row.iloc[0]
    print(f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV:")
    print(f"   SampleRowID: {row['SampleRowID']}")
    print(f"   OriginalSampleNumber: '{row['OriginalSampleNumber']}'")
    print(f"   –¢–∏–ø: {type(row['OriginalSampleNumber'])}")
    print(f"   pd.isna(): {pd.isna(row['OriginalSampleNumber'])}")
    print(f"   == '': {row['OriginalSampleNumber'] == ''}")
    print()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
    row_dict = row.to_dict()
    print(f"üìã –ü–æ—Å–ª–µ to_dict():")
    print(f"   OriginalSampleNumber: '{row_dict['OriginalSampleNumber']}'")
    print(f"   –¢–∏–ø: {type(row_dict['OriginalSampleNumber'])}")
    print()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
    original_value = row_dict['OriginalSampleNumber']
    for key, value in row_dict.items():
        if pd.isna(value) or value == "":
            row_dict[key] = (
                None
                if "_FK" in key or key == "OriginalSampleNumber"
                else ""
            )
            if key == "OriginalSampleNumber":
                print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ OriginalSampleNumber:")
                print(f"   –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{original_value}'")
                print(f"   pd.isna(value): {pd.isna(value)}")
                print(f"   value == '': {value == ''}")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {row_dict[key]}")
                print()
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        elif (
            key.startswith("Has")
            or key == "IsIdentified"
            or key == "SEQStatus"
        ):
            row_dict[key] = str(value).lower()
    
    print(f"üìù –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:")
    print(f"   OriginalSampleNumber: {row_dict['OriginalSampleNumber']}")
    print()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        validated_data = validate_csv_row(
            ImportSampleSchema, row_dict, row_number=56
        )
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:")
        print(f"   validated_data.OriginalSampleNumber: {validated_data.OriginalSampleNumber}")
        print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
    print("üîç –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ:")
    for key, value in row_dict.items():
        print(f"   {key}: '{value}' (—Ç–∏–ø: {type(value)})")

if __name__ == "__main__":
    debug_sample_55()