#!/usr/bin/env python
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'strain_tracker_project.settings')
django.setup()

from sample_management.models import Sample
from scripts.normalize_text import normalize_cyrillic_to_latin
from django.db import transaction

def fix_encoding_issues():
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—Ü—ã —Å –Ω–µ–ø—É—Å—Ç—ã–º original_sample_number
    samples_with_numbers = Sample.objects.filter(
        original_sample_number__isnull=False
    ).exclude(original_sample_number='')
    
    print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏: {samples_with_numbers.count()}")
    
    issues_to_fix = []
    
    for sample in samples_with_numbers:
        original_value = sample.original_sample_number
        normalized_value = normalize_cyrillic_to_latin(original_value)
        
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        if original_value != normalized_value:
            issues_to_fix.append({
                'sample': sample,
                'original': original_value,
                'normalized': normalized_value
            })
    
    print(f"üö® –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(issues_to_fix)}")
    
    if not issues_to_fix:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print("\nüìã –ë—É–¥—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏:")
    print("-" * 60)
    
    for issue in issues_to_fix:
        print(f"üî∏ –û–±—Ä–∞–∑–µ—Ü ID: {issue['sample'].id}")
        print(f"   '{issue['original']}' -> '{issue['normalized']}'")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ùì –ò—Å–ø—Ä–∞–≤–∏—Ç—å {len(issues_to_fix)} –∑–∞–ø–∏—Å–µ–π? (y/N): ", end="")
    confirmation = input().strip().lower()
    
    if confirmation not in ['y', 'yes', '–¥–∞', '–¥']:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try:
        with transaction.atomic():
            fixed_count = 0
            
            for issue in issues_to_fix:
                old_value = issue['sample'].original_sample_number
                new_value = issue['normalized']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                issue['sample'].original_sample_number = new_value
                issue['sample'].save(update_fields=['original_sample_number'])
                
                print(f"‚úÖ –û–±—Ä–∞–∑–µ—Ü ID {issue['sample'].id}: '{old_value}' -> '{new_value}'")
                fixed_count += 1
            
            print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {fixed_count}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    remaining_issues = []
    
    for sample in Sample.objects.filter(original_sample_number__isnull=False).exclude(original_sample_number=''):
        original_value = sample.original_sample_number
        normalized_value = normalize_cyrillic_to_latin(original_value)
        
        if original_value != normalized_value:
            remaining_issues.append(sample)
    
    if remaining_issues:
        print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã: {len(remaining_issues)}")
    else:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")

def verify_sample_55():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞ 55"""
    print("\nüîç –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑—Ü–∞ 55:")
    print("-" * 40)
    
    try:
        sample_55 = Sample.objects.get(id=55)
        print(f"üìã –û–±—Ä–∞–∑–µ—Ü ID 55:")
        print(f"   original_sample_number: '{sample_55.original_sample_number}'")
        print(f"   Unicode –∫–æ–¥—ã: {[ord(c) for c in sample_55.original_sample_number]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –Ω–∞–π—Ç–∏ –ø–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
        latin_samples = Sample.objects.filter(original_sample_number='11A')
        print(f"   –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å '11A': {latin_samples.count()}")
        
        if latin_samples.exists():
            print("‚úÖ –û–±—Ä–∞–∑–µ—Ü —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–º—É –Ω–æ–º–µ—Ä—É!")
        else:
            print("‚ùå –û–±—Ä–∞–∑–µ—Ü –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–º—É –Ω–æ–º–µ—Ä—É")
            
    except Sample.DoesNotExist:
        print("‚ùå –û–±—Ä–∞–∑–µ—Ü —Å ID 55 –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    fix_encoding_issues()
    verify_sample_55()