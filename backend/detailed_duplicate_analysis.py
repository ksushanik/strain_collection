#!/usr/bin/env python
import os
import sys
import django
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'strain_tracker_project.settings')
django.setup()

from sample_management.models import Sample

def detailed_duplicate_analysis():
    print("üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –æ–±—Ä–∞–∑—Ü–æ–≤")
    print("=" * 70)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—Ä–∞–∑—Ü—ã –ø–æ –Ω–æ–º–µ—Ä–∞–º
    samples_by_number = defaultdict(list)
    
    samples = Sample.objects.filter(
        original_sample_number__isnull=False
    ).exclude(original_sample_number='').select_related('strain', 'storage')
    
    for sample in samples:
        samples_by_number[sample.original_sample_number].append(sample)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = {number: samples for number, samples in samples_by_number.items() if len(samples) > 1}
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –Ω–æ–º–µ—Ä–æ–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("-" * 50)
    
    patterns = {
        'same_strain_different_storage': 0,
        'different_strains_same_base': 0,
        'completely_different': 0,
        'strain_variations': 0
    }
    
    examples = {
        'same_strain_different_storage': [],
        'different_strains_same_base': [],
        'strain_variations': []
    }
    
    for number, sample_list in list(duplicates.items())[:20]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20
        strain_names = [str(sample.strain) if sample.strain else 'No strain' for sample in sample_list]
        unique_strains = set(strain_names)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —à—Ç–∞–º–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è
        if len(unique_strains) == 1 and len(sample_list) > 1:
            patterns['same_strain_different_storage'] += 1
            if len(examples['same_strain_different_storage']) < 3:
                examples['same_strain_different_storage'].append({
                    'number': number,
                    'samples': sample_list,
                    'strain': strain_names[0]
                })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —à—Ç–∞–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏)
        elif len(unique_strains) > 1:
            base_names = set()
            for strain_name in unique_strains:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —à—Ç–∞–º–º–∞ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ –¥–µ—Ñ–∏—Å–∞)
                base_name = strain_name.split(' ')[0].split('-')[0]
                base_names.add(base_name)
            
            if len(base_names) == 1:
                patterns['strain_variations'] += 1
                if len(examples['strain_variations']) < 3:
                    examples['strain_variations'].append({
                        'number': number,
                        'samples': sample_list,
                        'strains': list(unique_strains)
                    })
            else:
                patterns['different_strains_same_base'] += 1
                if len(examples['different_strains_same_base']) < 3:
                    examples['different_strains_same_base'].append({
                        'number': number,
                        'samples': sample_list,
                        'strains': list(unique_strains)
                    })
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    print("üìà –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   üîÑ –û–¥–∏–Ω —à—Ç–∞–º–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö: {patterns['same_strain_different_storage']}")
    print(f"   üß¨ –í–∞—Ä–∏–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —à—Ç–∞–º–º–∞: {patterns['strain_variations']}")
    print(f"   üîÄ –†–∞–∑–Ω—ã–µ —à—Ç–∞–º–º—ã —Å –æ–¥–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º: {patterns['different_strains_same_base']}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    print("üí° –ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
    print("-" * 40)
    
    if examples['same_strain_different_storage']:
        print("\nüîÑ –û–¥–∏–Ω —à—Ç–∞–º–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è:")
        for example in examples['same_strain_different_storage']:
            print(f"   –ù–æ–º–µ—Ä '{example['number']}' - {example['strain']}")
            for sample in example['samples']:
                storage_info = f"Box {sample.storage.box_id}, Cell {sample.storage.cell_id}" if sample.storage else "No storage"
                print(f"      ID {sample.id}: {storage_info}")
            print()
    
    if examples['strain_variations']:
        print("\nüß¨ –í–∞—Ä–∏–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —à—Ç–∞–º–º–∞:")
        for example in examples['strain_variations']:
            print(f"   –ù–æ–º–µ—Ä '{example['number']}':")
            for strain in example['strains']:
                print(f"      - {strain}")
            print()
    
    if examples['different_strains_same_base']:
        print("\nüîÄ –†–∞–∑–Ω—ã–µ —à—Ç–∞–º–º—ã —Å –æ–¥–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º:")
        for example in examples['different_strains_same_base']:
            print(f"   –ù–æ–º–µ—Ä '{example['number']}':")
            for strain in example['strains']:
                print(f"      - {strain}")
            print()

def analyze_storage_distribution():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º"""
    print("\nüì¶ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º:")
    print("=" * 50)
    
    # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    top_duplicates = Sample.objects.values('original_sample_number').annotate(
        count=django.db.models.Count('id')
    ).filter(count__gt=10).order_by('-count')[:3]
    
    for dup in top_duplicates:
        number = dup['original_sample_number']
        count = dup['count']
        
        print(f"\nüìå –ù–æ–º–µ—Ä '{number}' ({count} –æ–±—Ä–∞–∑—Ü–æ–≤):")
        
        samples = Sample.objects.filter(original_sample_number=number).select_related('storage')
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–æ–∫—Å–∞–º
        boxes = defaultdict(list)
        for sample in samples:
            if sample.storage:
                box_key = f"Box {sample.storage.box_id}"
                boxes[box_key].append(sample)
        
        for box, box_samples in boxes.items():
            print(f"   {box}: {len(box_samples)} –æ–±—Ä–∞–∑—Ü–æ–≤")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —è—á–µ–µ–∫
            cells = [f"Cell {s.storage.cell_id}" for s in box_samples[:5]]
            if len(box_samples) > 5:
                cells.append(f"... –∏ –µ—â–µ {len(box_samples) - 5}")
            print(f"      –Ø—á–µ–π–∫–∏: {', '.join(cells)}")

def suggest_solutions():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 60)
    
    print("1Ô∏è‚É£ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   ‚Ä¢ –û–¥–∏–Ω –æ–±—Ä–∞–∑–µ—Ü —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö")
    print("   ‚Ä¢ –†–∞–∑–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, HS - heat shock)")
    print("   ‚Ä¢ –†–∞–∑–Ω—ã–µ —à—Ç–∞–º–º—ã –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
    print("   ‚Ä¢ –û—à–∏–±–∫–∏ –≤ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
    print()
    
    print("2Ô∏è‚É£ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
    print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ 'replica_number' –∏–ª–∏ 'copy_number'")
    print("   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á: original_sample_number + replica")
    print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ 'sample_type' (original, replica, processed)")
    print("   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏")
    print()
    
    print("3Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø–æ–ª–µ–π")
    print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

if __name__ == "__main__":
    detailed_duplicate_analysis()
    analyze_storage_distribution()
    suggest_solutions()