#!/usr/bin/env python
"""
–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–æ–¥–µ–ª–∏ Sample –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –æ–±—Ä–∞–∑—Ü–æ–≤

–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:
1. üîÑ –û–¥–∏–Ω —à—Ç–∞–º–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä–µ–ø–ª–∏–∫–∏)
2. üß¨ –í–∞—Ä–∏–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —à—Ç–∞–º–º–∞ (—Ä–∞–∑–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: HS - heat shock, —Ä–∞–∑–Ω—ã–µ –∏–∑–æ–ª—è—Ç—ã)
3. üîÄ –†–∞–∑–Ω—ã–µ —à—Ç–∞–º–º—ã —Å –æ–¥–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º –æ–±—Ä–∞–∑—Ü–∞

–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª–∏:
"""

from django.db import models

class ImprovedSample(models.Model):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å Sample —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–ø–ª–∏–∫ –∏ –≤–∞—Ä–∏–∞—Ü–∏–π
    """
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    original_sample_number = models.CharField(
        max_length=50, 
        verbose_name="–ù–æ–º–µ—Ä –æ–±—Ä–∞–∑—Ü–∞",
        help_text="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—Ä–∞–∑—Ü–∞ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
    )
    
    # –ù–û–í–´–ï –ü–û–õ–Ø –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # 1. –ü–æ–ª–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —Ä–µ–ø–ª–∏–∫ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞
    replica_number = models.PositiveIntegerField(
        default=1,
        verbose_name="–ù–æ–º–µ—Ä —Ä–µ–ø–ª–∏–∫–∏",
        help_text="–ù–æ–º–µ—Ä –∫–æ–ø–∏–∏ –æ–±—Ä–∞–∑—Ü–∞ (1, 2, 3...)"
    )
    
    # 2. –ü–æ–ª–µ –¥–ª—è —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞–∑—Ü–∞
    PROCESSING_CHOICES = [
        ('original', '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π'),
        ('hs', 'Heat Shock (HS)'),
        ('replica', '–†–µ–ø–ª–∏–∫–∞'),
        ('subculture', '–°—É–±–∫—É–ª—å—Ç—É—Ä–∞'),
        ('isolate', '–ò–∑–æ–ª—è—Ç'),
    ]
    
    processing_type = models.CharField(
        max_length=20,
        choices=PROCESSING_CHOICES,
        default='original',
        verbose_name="–¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        help_text="–¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞"
    )
    
    # 3. –ü–æ–ª–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∏–∑–æ–ª—è—Ç–∞/–≤–∞—Ä–∏–∞–Ω—Ç–∞
    isolate_number = models.CharField(
        max_length=10,
        blank=True,
        null=True,
        verbose_name="–ù–æ–º–µ—Ä –∏–∑–æ–ª—è—Ç–∞",
        help_text="–ù–æ–º–µ—Ä –∏–∑–æ–ª—è—Ç–∞ –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1, 2, 3, 4, 5...)"
    )
    
    # 4. –°–æ—Å—Ç–∞–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    @property
    def unique_sample_id(self):
        """
        –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–∑—Ü–∞
        –§–æ—Ä–º–∞—Ç: {original_sample_number}-{isolate_number}-{processing_type}-{replica_number}
        –ü—Ä–∏–º–µ—Ä: 100I-2-HS-1
        """
        parts = [self.original_sample_number]
        
        if self.isolate_number:
            parts.append(self.isolate_number)
        
        if self.processing_type != 'original':
            parts.append(self.processing_type.upper())
        
        if self.replica_number > 1:
            parts.append(f"R{self.replica_number}")
        
        return "-".join(parts)
    
    # 5. –ü–æ–ª–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
    sample_group = models.CharField(
        max_length=50,
        blank=True,
        null=True,
        verbose_name="–ì—Ä—É–ø–ø–∞ –æ–±—Ä–∞–∑—Ü–æ–≤",
        help_text="–ì—Ä—É–ø–ø–∞ –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã 100I)"
    )
    
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
    strain = models.ForeignKey('strain_management.Strain', on_delete=models.CASCADE)
    storage = models.ForeignKey('storage_management.Storage', on_delete=models.CASCADE)
    
    class Meta:
        # –°–æ—Å—Ç–∞–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        unique_together = [
            ['original_sample_number', 'isolate_number', 'processing_type', 'replica_number']
        ]
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        indexes = [
            models.Index(fields=['original_sample_number']),
            models.Index(fields=['sample_group']),
            models.Index(fields=['processing_type']),
        ]
        
        verbose_name = "–û–±—Ä–∞–∑–µ—Ü"
        verbose_name_plural = "–û–±—Ä–∞–∑—Ü—ã"
    
    def __str__(self):
        return self.unique_sample_id


# –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def create_migration_script():
    """
    –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    migration_logic = """
    
    # –õ–æ–≥–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
    
    1. –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤:
       - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ original_sample_number
       - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —à—Ç–∞–º–º–∞ (HS, –Ω–æ–º–µ—Ä–∞ –∏–∑–æ–ª—è—Ç–æ–≤)
       - –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ä–µ–ø–ª–∏–∫ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    2. –ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–µ–π:
       
       def migrate_existing_sample(sample):
           strain_name = str(sample.strain)
           
           # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
           if 'HS' in strain_name:
               processing_type = 'hs'
           elif any(char.isdigit() for char in strain_name.split('-')[-1]):
               processing_type = 'isolate'
           else:
               processing_type = 'original'
           
           # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑–æ–ª—è—Ç–∞
           isolate_number = None
           parts = strain_name.split('-')
           for part in parts:
               if part.replace('HS', '').isdigit():
                   isolate_number = part.replace('HS', '')
                   break
           
           # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ä–µ–ø–ª–∏–∫–∏
           same_samples = Sample.objects.filter(
               original_sample_number=sample.original_sample_number,
               strain__name__contains=isolate_number or '',
               strain__name__contains='HS' if 'HS' in strain_name else ''
           )
           replica_number = list(same_samples).index(sample) + 1
           
           return {
               'processing_type': processing_type,
               'isolate_number': isolate_number,
               'replica_number': replica_number,
               'sample_group': sample.original_sample_number
           }
    
    3. –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:
       
       –ë—ã–ª–æ: 100I (8 –æ–±—Ä–∞–∑—Ü–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º)
       –°—Ç–∞–ª–æ:
       - 100I-1-ORIGINAL-1    (IB 2014I100-1)
       - 100I-1-HS-1          (IB 2014I100-1HS)
       - 100I-2-ORIGINAL-1    (IB 2014I100-2)
       - 100I-2-HS-1          (IB 2014I100-2HS)
       - 100I-3-ORIGINAL-1    (IB 2014I100-3)
       - 100I-3-HS-1          (IB 2014I100-3HS)
       - 100I-4-ORIGINAL-1    (IB 2014I100-4)
       - 100I-5-ORIGINAL-1    (IB 2014I100-5)
    """
    
    return migration_logic


# –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
def benefits_analysis():
    """
    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:
    
    1. üéØ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å:
       - –ö–∞–∂–¥—ã–π –æ–±—Ä–∞–∑–µ—Ü –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á
       - –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    2. üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫:
       - –ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—Ä–∞–∑—Ü–æ–≤
       - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
       - –ü–æ–∏—Å–∫ —Ä–µ–ø–ª–∏–∫
    
    3. üìä –õ—É—á—à–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:
       - –ü–æ–¥—Å—á–µ—Ç —Ä–µ–ø–ª–∏–∫
       - –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
       - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
    
    4. üîß –ì–∏–±–∫–æ—Å—Ç—å:
       - –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
       - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–ø–ª–∏–∫
       - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    
    5. üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:
       - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–æ—Å—Ç—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏
       - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
       - –£–ø—Ä–æ—â–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    pass


if __name__ == "__main__":
    print("üìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–æ–¥–µ–ª–∏ Sample")
    print("=" * 50)
    print(create_migration_script())
    print("\n" + "=" * 50)
    print("üí° –î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:")
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ Django")
    print("2. –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π")
    print("4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ CSV")
    print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")