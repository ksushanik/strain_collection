#!/usr/bin/env python
import os
import sys
import django
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'strain_tracker_project.settings')
django.setup()

from sample_management.models import Sample
from scripts.normalize_text import normalize_cyrillic_to_latin

def find_encoding_issues():
    print("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—Ü—ã —Å –Ω–µ–ø—É—Å—Ç—ã–º original_sample_number
    samples_with_numbers = Sample.objects.filter(
        original_sample_number__isnull=False
    ).exclude(original_sample_number='')
    
    print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏: {samples_with_numbers.count()}")
    print()
    
    issues_found = []
    
    for sample in samples_with_numbers:
        original_value = sample.original_sample_number
        normalized_value = normalize_cyrillic_to_latin(original_value)
        
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        if original_value != normalized_value:
            issues_found.append({
                'id': sample.id,
                'original': original_value,
                'normalized': normalized_value,
                'original_codes': [ord(c) for c in original_value],
                'normalized_codes': [ord(c) for c in normalized_value]
            })
    
    print(f"üö® –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {len(issues_found)}")
    print()
    
    if issues_found:
        print("üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º:")
        print("-" * 60)
        
        for issue in issues_found:
            print(f"üî∏ –û–±—Ä–∞–∑–µ—Ü ID: {issue['id']}")
            print(f"   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{issue['original']}'")
            print(f"   Unicode –∫–æ–¥—ã: {issue['original_codes']}")
            print(f"   –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: '{issue['normalized']}'")
            print(f"   Unicode –∫–æ–¥—ã: {issue['normalized_codes']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Å–∏–º–≤–æ–ª—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ
            problem_chars = []
            for i, (orig_char, norm_char) in enumerate(zip(issue['original'], issue['normalized'])):
                if orig_char != norm_char:
                    problem_chars.append(f"–ø–æ–∑–∏—Ü–∏—è {i}: '{orig_char}' (U+{ord(orig_char):04X}) -> '{norm_char}' (U+{ord(norm_char):04X})")
            
            if problem_chars:
                print(f"   –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(problem_chars)}")
            print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
    if issues_found:
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:")
        print("-" * 30)
        
        cyrillic_chars_found = set()
        for issue in issues_found:
            for char in issue['original']:
                if char != normalize_cyrillic_to_latin(char):
                    cyrillic_chars_found.add(char)
        
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã: {len(cyrillic_chars_found)}")
        for char in sorted(cyrillic_chars_found):
            latin_equivalent = normalize_cyrillic_to_latin(char)
            print(f"     '{char}' (U+{ord(char):04X}) -> '{latin_equivalent}' (U+{ord(latin_equivalent):04X})")
        print()
    
    return issues_found

def preview_fix():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"""
    issues = find_encoding_issues()
    
    if not issues:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print("üîß –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
    print("=" * 50)
    
    for issue in issues:
        print(f"UPDATE sample_management_sample SET original_sample_number = '{issue['normalized']}' WHERE id = {issue['id']};")
    
    print()
    print(f"üí° –í—Å–µ–≥–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(issues)}")

if __name__ == "__main__":
    preview_fix()