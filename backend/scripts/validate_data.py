#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ —Å –ø–æ–º–æ—â—å—é Pydantic
"""

import os
import sys
import django
from pathlib import Path
from pydantic import ValidationError

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(project_root / 'backend'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'strain_tracker_project.settings')
django.setup()

from collection_manager.models import Strain, Sample, Storage
from collection_manager.schemas import StrainSchema, SampleSchema, StorageSchema


def validate_strains(limit=100):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —à—Ç–∞–º–º–æ–≤"""
    print(f"ü¶† –í–∞–ª–∏–¥–∞—Ü–∏—è —à—Ç–∞–º–º–æ–≤ (–ø–µ—Ä–≤—ã–µ {limit})...")
    strains = Strain.objects.all()[:limit]
    errors = 0
    
    for strain in strains:
        try:
            StrainSchema.model_validate({
                'id': strain.id,
                'short_code': strain.short_code,
                'rrna_taxonomy': strain.rrna_taxonomy,
                'identifier': strain.identifier,
                'name_alt': strain.name_alt,
                'rcam_collection_id': strain.rcam_collection_id,
            })
        except ValidationError as e:
            errors += 1
            if errors <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à—Ç–∞–º–º–µ {strain.id}: {e}")
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {errors} –æ—à–∏–±–æ–∫ –∏–∑ {len(strains)} —à—Ç–∞–º–º–æ–≤")
    return errors


def validate_samples(limit=100):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤"""
    print(f"\nüß™ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ (–ø–µ—Ä–≤—ã–µ {limit})...")
    samples = Sample.objects.all()[:limit]
    errors = 0
    
    for sample in samples:
        try:
            SampleSchema.model_validate({
                'id': sample.id,
                'index_letter_id': sample.index_letter.id if sample.index_letter else None,
                'strain_id': sample.strain.id if sample.strain else None,
                'storage_id': sample.storage.id if sample.storage else None,
                'original_sample_number': sample.original_sample_number,
                'source_id': sample.source.id if sample.source else None,
                'location_id': sample.location.id if sample.location else None,
                'appendix_note_id': sample.appendix_note.id if sample.appendix_note else None,
                'comment_id': sample.comment.id if sample.comment else None,
                'has_photo': sample.has_photo,
                'is_identified': sample.is_identified,
                'has_antibiotic_activity': sample.has_antibiotic_activity,
                'has_genome': sample.has_genome,
                'has_biochemistry': sample.has_biochemistry,
                'seq_status': sample.seq_status,
            })
        except ValidationError as e:
            errors += 1
            if errors <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–∑—Ü–µ {sample.id}: {e}")
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {errors} –æ—à–∏–±–æ–∫ –∏–∑ {len(samples)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    return errors


def validate_storage(limit=100):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â"""
    print(f"\nüì¶ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â (–ø–µ—Ä–≤—ã–µ {limit})...")
    storages = Storage.objects.all()[:limit]
    errors = 0
    
    for storage in storages:
        try:
            StorageSchema.model_validate({
                'id': storage.id,
                'box_id': storage.box_id,
                'cell_id': storage.cell_id,
            })
        except ValidationError as e:
            errors += 1
            if errors <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ {storage.id}: {e}")
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {errors} –æ—à–∏–±–æ–∫ –∏–∑ {len(storages)} —Ö—Ä–∞–Ω–∏–ª–∏—â")
    return errors


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ —Å –ø–æ–º–æ—â—å—é Pydantic...")
    print("=" * 50)
    
    total_errors = 0
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    total_errors += validate_strains(50)
    total_errors += validate_samples(50)
    total_errors += validate_storage(50)
    
    print("\n" + "=" * 50)
    if total_errors == 0:
        print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_errors} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        print("üí° –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"- –®—Ç–∞–º–º—ã –≤ –±–∞–∑–µ: {Strain.objects.count()}")
    print(f"- –û–±—Ä–∞–∑—Ü—ã –≤ –±–∞–∑–µ: {Sample.objects.count()}")
    print(f"- –•—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –±–∞–∑–µ: {Storage.objects.count()}")


if __name__ == "__main__":
    main() 