#!/usr/bin/env python
"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ - –∑–∞–º–µ–Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
"""

def normalize_cyrillic_to_latin(text):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–∑—É–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ,
    –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã.
    
    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    """
    if not text or not isinstance(text, str):
        return text
    
    # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
    cyrillic_to_latin = {
        '–ê': 'A',  # U+0410 -> U+0041
        '–í': 'B',  # U+0412 -> U+0042
        '–ï': 'E',  # U+0415 -> U+0045
        '–ö': 'K',  # U+041A -> U+004B
        '–ú': 'M',  # U+041C -> U+004D
        '–ù': 'H',  # U+041D -> U+0048
        '–û': 'O',  # U+041E -> U+004F
        '–†': 'P',  # U+0420 -> U+0050
        '–°': 'C',  # U+0421 -> U+0043
        '–¢': 'T',  # U+0422 -> U+0054
        '–£': 'Y',  # U+0423 -> U+0059 (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        '–•': 'X',  # U+0425 -> U+0058
        '–∞': 'a',  # U+0430 -> U+0061
        '–µ': 'e',  # U+0435 -> U+0065
        '–æ': 'o',  # U+043E -> U+006F
        '—Ä': 'p',  # U+0440 -> U+0070
        '—Å': 'c',  # U+0441 -> U+0063
        '—É': 'y',  # U+0443 -> U+0079
        '—Ö': 'x',  # U+0445 -> U+0078
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    normalized_text = text
    for cyrillic, latin in cyrillic_to_latin.items():
        normalized_text = normalized_text.replace(cyrillic, latin)
    
    return normalized_text


def test_normalization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
    test_cases = [
        ('11–ê', '11A'),  # –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –ê -> –ª–∞—Ç–∏–Ω—Å–∫–∞—è A
        ('12–í', '12B'),  # –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –í -> –ª–∞—Ç–∏–Ω—Å–∫–∞—è B
        ('ABC', 'ABC'),  # –£–∂–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        ('123', '123'),  # –¶–∏—Ñ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        ('–ê–í–°123', 'ABC123'),  # –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        ('', ''),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        (None, None),  # None
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
    print("=" * 40)
    
    for input_text, expected in test_cases:
        result = normalize_cyrillic_to_latin(input_text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{input_text}' -> '{result}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected}')")
        
        if input_text and isinstance(input_text, str):
            print(f"   Unicode –∫–æ–¥—ã –≤—Ö–æ–¥–∞: {[ord(c) for c in input_text]}")
            print(f"   Unicode –∫–æ–¥—ã –≤—ã—Ö–æ–¥–∞: {[ord(c) for c in result]}")
        print()


if __name__ == "__main__":
    test_normalization()