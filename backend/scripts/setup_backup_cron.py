#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup'–æ–≤ —á–µ—Ä–µ–∑ cron –¥–ª—è strain_collection_new

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –°–æ–∑–¥–∞–Ω–∏–µ cron –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö backup'–æ–≤
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ, –µ–∂–µ–º–µ—Å—è—á–Ω–æ)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path


class BackupCronSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup'–æ–≤ —á–µ—Ä–µ–∑ cron"""

    def __init__(self, project_path: str = None):
        self.project_path = Path(
            project_path or os.path.dirname(__file__)
        ).parent
        self.scripts_path = self.project_path / "scripts"
        self.backup_script = self.scripts_path / "backup_database.py"
        self.venv_path = self.project_path / "strain_venv"

    def get_current_crontab(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ crontab"""
        try:
            result = subprocess.run(
                ["crontab", "-l"], capture_output=True, text=True
            )
            if result.returncode == 0:
                return result.stdout
            else:
                return ""
        except Exception:
            return ""

    def backup_crontab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ backup'–∞ —Ç–µ–∫—É—â–µ–≥–æ crontab"""
        current_crontab = self.get_current_crontab()
        if current_crontab:
            backup_file = self.project_path / "backups" / "crontab_backup.txt"
            backup_file.parent.mkdir(exist_ok=True)

            with open(backup_file, "w") as f:
                f.write(current_crontab)
            print(f"‚úÖ Backup crontab —Å–æ–∑–¥–∞–Ω: {backup_file}")

    def generate_cron_entries(self, schedule: str = "daily") -> list:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π cron –¥–ª—è backup'–æ–≤

        Args:
            schedule: 'daily', 'weekly', 'monthly' –∏–ª–∏ 'custom'
        """
        python_path = self.venv_path / "bin" / "python"
        log_file = self.project_path / "backups" / "cron.log"

        entries = []

        if schedule == "daily":
            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–ª–Ω—ã–π backup –≤ 2:00
            entries.append(
                f"0 2 * * * cd {self.project_path} && "
                f"{python_path} {self.backup_script} create --type full "
                f">> {log_file} 2>&1"
            )

            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 3:00
            entries.append(
                f"0 3 * * 0 cd {self.project_path} && "
                f"{python_path} {self.backup_script} cleanup --keep-days 30 --keep-count 10 "
                f">> {log_file} 2>&1"
            )

        elif schedule == "weekly":
            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ–ª–Ω—ã–π backup –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 2:00
            entries.append(
                f"0 2 * * 1 cd {self.project_path} && "
                f"{python_path} {self.backup_script} create --type full "
                f">> {log_file} 2>&1"
            )

            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π schema backup –≤ 23:00 (–∫—Ä–æ–º–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞)
            entries.append(
                f"0 23 * * 2-7 cd {self.project_path} && "
                f"{python_path} {self.backup_script} create --type schema "
                f">> {log_file} 2>&1"
            )

            # –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ –ø–µ—Ä–≤–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 3:00
            entries.append(
                f"0 3 1-7 * 0 cd {self.project_path} && "
                f"{python_path} {self.backup_script} cleanup --keep-days 60 --keep-count 20 "
                f">> {log_file} 2>&1"
            )

        elif schedule == "monthly":
            # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–æ–ª–Ω—ã–π backup –≤ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ 2:00
            entries.append(
                f"0 2 1 * * cd {self.project_path} && "
                f"{python_path} {self.backup_script} create --type full "
                f">> {log_file} 2>&1"
            )

            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π schema backup –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00
            entries.append(
                f"0 2 * * 0 cd {self.project_path} && "
                f"{python_path} {self.backup_script} create --type schema "
                f">> {log_file} 2>&1"
            )

            # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            entries.append(
                f"0 3 1 1,4,7,10 * cd {self.project_path} && "
                f"{python_path} {self.backup_script} cleanup --keep-days 90 --keep-count 30 "
                f">> {log_file} 2>&1"
            )

        return entries

    def install_cron_entries(self, entries: list):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ crontab"""
        current_crontab = self.get_current_crontab()

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π strain_collection
        lines = current_crontab.split("\n") if current_crontab else []
        filtered_lines = [
            line
            for line in lines
            if "strain_collection" not in line
            and "backup_database.py" not in line
        ]

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        filtered_lines.extend(
            [
                "",
                "# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup'—ã –¥–ª—è strain_collection_new",
                f"# –°–æ–∑–¥–∞–Ω–æ: {subprocess.run(['date'], capture_output=True, text=True).stdout.strip()}",
            ]
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
        filtered_lines.extend(entries)

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ crontab
        new_crontab = "\n".join(filtered_lines) + "\n"

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ crontab
        try:
            process = subprocess.Popen(
                ["crontab", "-"], stdin=subprocess.PIPE, text=True
            )
            process.communicate(input=new_crontab)

            if process.returncode == 0:
                print("‚úÖ Cron –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cron –∑–∞–ø–∏—Å–µ–π")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ crontab: {e}")
            return False

    def remove_cron_entries(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π strain_collection –∏–∑ crontab"""
        current_crontab = self.get_current_crontab()

        if not current_crontab:
            print("üìÇ Crontab –ø—É—Å—Ç")
            return True

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π
        lines = current_crontab.split("\n")
        filtered_lines = []
        removing = False

        for line in lines:
            if "strain_collection" in line and line.startswith("#"):
                removing = True
                continue
            elif removing and (line.strip() == "" or not line.startswith("#")):
                if "backup_database.py" not in line:
                    removing = False
                    filtered_lines.append(line)
            elif not removing:
                filtered_lines.append(line)

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ
        while filtered_lines and filtered_lines[-1].strip() == "":
            filtered_lines.pop()

        new_crontab = "\n".join(filtered_lines)
        if new_crontab and not new_crontab.endswith("\n"):
            new_crontab += "\n"

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ crontab
        try:
            process = subprocess.Popen(
                ["crontab", "-"], stdin=subprocess.PIPE, text=True
            )
            process.communicate(input=new_crontab)

            if process.returncode == 0:
                print("‚úÖ –ó–∞–ø–∏—Å–∏ strain_collection —É–¥–∞–ª–µ–Ω—ã –∏–∑ crontab")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è crontab")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è crontab: {e}")
            return False

    def show_current_entries(self):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π cron –¥–ª—è strain_collection"""
        current_crontab = self.get_current_crontab()

        if not current_crontab:
            print("üìÇ Crontab –ø—É—Å—Ç")
            return

        lines = current_crontab.split("\n")
        strain_entries = []
        in_strain_section = False

        for line in lines:
            if "strain_collection" in line and line.startswith("#"):
                in_strain_section = True
                strain_entries.append(line)
            elif in_strain_section:
                if (
                    line.strip() == ""
                    or line.startswith("#")
                    or "backup_database.py" in line
                ):
                    strain_entries.append(line)
                else:
                    in_strain_section = False

        if strain_entries:
            print("üìÖ –¢–µ–∫—É—â–∏–µ cron –∑–∞–ø–∏—Å–∏ –¥–ª—è strain_collection:")
            for entry in strain_entries:
                print(f"   {entry}")
        else:
            print("üìÇ –ó–∞–ø–∏—Å–∏ strain_collection –≤ crontab –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    def test_backup_command(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã backup"""
        python_path = self.venv_path / "bin" / "python"

        if not python_path.exists():
            print(f"‚ùå Python –≤ venv –Ω–µ –Ω–∞–π–¥–µ–Ω: {python_path}")
            return False

        if not self.backup_script.exists():
            print(f"‚ùå –°–∫—Ä–∏–ø—Ç backup –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.backup_script}")
            return False

        try:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è schema backup
            cmd = [
                str(python_path),
                str(self.backup_script),
                "create",
                "--type",
                "schema",
            ]
            result = subprocess.run(
                cmd,
                cwd=str(self.project_path),
                capture_output=True,
                text=True,
                timeout=60,
            )

            if result.returncode == 0:
                print("‚úÖ –¢–µ—Å—Ç backup –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è backup: {result.stderr}")
                return False

        except subprocess.TimeoutExpired:
            print("‚ùå Timeout –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ backup –∫–æ–º–∞–Ω–¥—ã")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False


def main():
    parser = argparse.ArgumentParser(
        description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup'–æ–≤ —á–µ—Ä–µ–∑ cron"
    )
    parser.add_argument(
        "action",
        choices=["install", "remove", "show", "test"],
        help="–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    )
    parser.add_argument(
        "--schedule",
        choices=["daily", "weekly", "monthly"],
        default="daily",
        help="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ backup'–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è install)",
    )
    parser.add_argument("--project-path", help="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É")

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ setup
    setup = BackupCronSetup(args.project_path)

    if args.action == "test":
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backup –∫–æ–º–∞–Ω–¥—ã...")
        success = setup.test_backup_command()
        sys.exit(0 if success else 1)

    elif args.action == "show":
        setup.show_current_entries()

    elif args.action == "remove":
        setup.backup_crontab()
        success = setup.remove_cron_entries()
        sys.exit(0 if success else 1)

    elif args.action == "install":
        print(f"üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup'–æ–≤ ({args.schedule})")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not setup.test_backup_command():
            print("‚ùå Backup –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            sys.exit(1)

        # –°–æ–∑–¥–∞–Ω–∏–µ backup —Ç–µ–∫—É—â–µ–≥–æ crontab
        setup.backup_crontab()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ cron –∑–∞–ø–∏—Å–µ–π
        entries = setup.generate_cron_entries(args.schedule)

        print("\nüìã –ë—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ cron –∑–∞–ø–∏—Å–∏:")
        for entry in entries:
            print(f"   {entry}")

        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): ").strip().lower()
        if response not in ["y", "yes"]:
            print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            sys.exit(0)

        success = setup.install_cron_entries(entries)

        if success:
            print(f"\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup'—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã ({args.schedule})")
            print(f"üìÅ Backup'—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {setup.project_path}/backups/")
            print(f"üìù –õ–æ–≥–∏ cron: {setup.project_path}/backups/cron.log")
            print("\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: crontab -l")
            print(f"üí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {sys.argv[0]} remove")

        sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
