#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö API endpoints –¥–ª—è –±–æ–∫—Å–æ–≤
–ó–∞–ø—É—Å–∫: python test_box_api.py
"""

import requests
import json
import sys

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000/api"

def test_api_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API...")
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API —Å—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ endpoints: {len(data.get('endpoints', []))}")
            return True
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_create_box():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫—Å–∞"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫—Å–∞...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    import time
    timestamp = int(time.time())
    test_box_data = {
        "box_id": f"TEST_BOX_{timestamp}",
        "rows": 8,
        "cols": 12,
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π –±–æ–∫—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/reference-data/boxes/create/",
            json=test_box_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 201:
            data = response.json()
            print(f"‚úÖ –ë–æ–∫—Å —Å–æ–∑–¥–∞–Ω: {data.get('message')}")
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ —è—á–µ–µ–∫: {data.get('box', {}).get('cells_created')}")
            return test_box_data["box_id"]
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–∫—Å–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ–∫—Å–∞: {e}")
        return None

def test_get_box(box_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–∫—Å–µ"""
    print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–∫—Å–µ {box_id}...")
    
    try:
        response = requests.get(f"{BASE_URL}/reference-data/boxes/{box_id}/")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   üì¶ ID: {data.get('box_id')}")
            print(f"   üìè –†–∞–∑–º–µ—Ä: {data.get('rows')}√ó{data.get('cols')}")
            print(f"   üìä –í—Å–µ–≥–æ —è—á–µ–µ–∫: {data.get('statistics', {}).get('total_cells')}")
            print(f"   üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {data.get('statistics', {}).get('occupancy_percentage')}%")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return False

def test_update_box(box_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–∫—Å–∞"""
    print(f"\n‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–∫—Å–∞ {box_id}...")
    
    update_data = {
        "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ–∫—Å–∞"
    }
    
    try:
        response = requests.put(
            f"{BASE_URL}/reference-data/boxes/{box_id}/update/",
            json=update_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ë–æ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {data.get('message')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False

def test_get_box_cells(box_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —è—á–µ–µ–∫ –±–æ–∫—Å–∞"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —è—á–µ–µ–∫ –±–æ–∫—Å–∞ {box_id}...")
    
    try:
        response = requests.get(f"{BASE_URL}/reference-data/boxes/{box_id}/cells/")
        
        if response.status_code == 200:
            data = response.json()
            cells = data.get('cells', [])
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —è—á–µ–µ–∫: {len(cells)}")
            if cells:
                print(f"   üìç –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞: {cells[0].get('cell_id')}")
                print(f"   üìç –ü–æ—Å–ª–µ–¥–Ω—è—è —è—á–µ–π–∫–∞: {cells[-1].get('cell_id')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è—á–µ–µ–∫: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è—á–µ–µ–∫: {e}")
        return False

def test_delete_box(box_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –±–æ–∫—Å–∞"""
    print(f"\nüóëÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –±–æ–∫—Å–∞ {box_id}...")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –±–µ–∑ force
        response = requests.delete(f"{BASE_URL}/reference-data/boxes/{box_id}/delete/")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ë–æ–∫—Å —É–¥–∞–ª–µ–Ω: {data.get('message')}")
            print(f"üìä –£–¥–∞–ª–µ–Ω–æ —è—á–µ–µ–∫: {data.get('statistics', {}).get('cells_deleted')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API –¥–ª—è –±–æ–∫—Å–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if not test_api_status():
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ–∫—Å
    box_id = test_create_box()
    if not box_id:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ–∫—Å")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–æ–∫—Å–æ–º
    success_count = 0
    total_tests = 4
    
    if test_get_box(box_id):
        success_count += 1
    
    if test_update_box(box_id):
        success_count += 1
    
    if test_get_box_cells(box_id):
        success_count += 1
    
    if test_delete_box(box_id):
        success_count += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_tests}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {total_tests - success_count}/{total_tests}")
    
    if success_count == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()