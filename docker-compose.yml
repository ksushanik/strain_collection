version: '3.8'

services:
  db:
    image: postgres:14-alpine
    container_name: strain_db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./logs:/var/log/postgresql
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-strain_db}
      - POSTGRES_USER=${POSTGRES_USER:-strain_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-strain_secure_password_2024}
      - TZ=${TZ:-Europe/Moscow}
    ports:
      - "5433:5432"
    networks:
      - strain_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: strain_backend
    restart: unless-stopped
    volumes:
      - ./backups:/app/backups
      - ./data:/app/data:ro
      - ./logs:/app/logs
      - ./scripts:/app/scripts:ro
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-strain_db}
      - POSTGRES_USER=${POSTGRES_USER:-strain_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-strain_secure_password_2024}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-your-very-secure-secret-key-change-in-production}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - TZ=${TZ:-Europe/Moscow}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - strain_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "echo '🔄 Ожидание готовности базы данных...' && \
        python manage.py migrate && \
        echo '✅ Миграции применены' && \
        python manage.py collectstatic --noinput --clear && \
        echo '✅ Статические файлы собраны' && \
        if [ `python manage.py shell -c 'from collection_manager.models import Strain; print(Strain.objects.count())'` -eq 0 ]; then \
          echo '🤔 База данных пуста. Запускаю первоначальный импорт...' && \
          python manage.py import_csv_data --table=all --force && \
          echo '✅ Первоначальный импорт данных завершен'; \
        else \
          echo '✅ База данных уже содержит данные. Импорт пропущен.'; \
        fi && \
        echo '🚀 Запуск Gunicorn сервера...' && \
        exec gunicorn --bind 0.0.0.0:8000 --workers 3 --worker-class gthread --threads 2 --worker-connections 1000 --max-requests 1000 --max-requests-jitter 100 --timeout 30 --keep-alive 2 --access-logfile /app/logs/access.log --error-logfile /app/logs/error.log --log-level info strain_tracker_project.wsgi:application"

  nginx:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: strain_frontend_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt:ro
      - ./data/certbot/www:/var/www/certbot:ro
      - ./logs:/var/log/nginx
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - strain_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      sh -c "
        echo '🔄 Настройка Nginx...' &&
        nginx -t &&
        echo '✅ Конфигурация Nginx корректна' &&
        echo '🚀 Запуск Nginx...' &&
        exec nginx -g 'daemon off;'
      "

  certbot:
    image: certbot/certbot:latest
    container_name: strain_certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./logs:/var/log/letsencrypt
    networks:
      - strain_network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot --email admin@example.com --agree-tos --no-eff-email; sleep 12h & wait $${!}; done;'"

  # Дополнительный сервис для мониторинга логов (опционально)
  logrotate:
    image: alpine:latest
    container_name: strain_logrotate
    restart: unless-stopped
    volumes:
      - ./logs:/logs
    command: >
      sh -c "
        while true; do
          find /logs -name '*.log' -size +100M -exec truncate -s 50M {} \;
          sleep 3600
        done
      "
    networks:
      - strain_network

volumes:
  postgres_data:
    driver: local

networks:
  strain_network:
    driver: bridge 
    ipam:
      config:
        - subnet: 172.20.0.0/16 