name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_REGISTRY: gimmyhat
  BACKEND_IMAGE: strain-collection-backend
  FRONTEND_IMAGE: strain-collection-frontend

jobs:
  # –≠—Ç–∞–ø 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint frontend code
      working-directory: ./frontend
      run: npm run lint

    - name: Type check frontend
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Test backend
      working-directory: ./backend
      run: |
        python manage.py check
        # python manage.py test

    - name: Security scan
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_TYPESCRIPT_ES: true
        VALIDATE_PYTHON_FLAKE8: true
        VALIDATE_DOCKERFILE_HADOLINT: true

  # –≠—Ç–∞–ø 2: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Generate backend metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Generate frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build frontend
      working-directory: ./frontend
      run: npm ci && npm run build

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # –≠—Ç–∞–ø 3: –î–µ–ø–ª–æ–π –Ω–∞ production
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to production
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
          set -e
          cd ${{ secrets.REMOTE_DIR }}
          
          # –°–æ–∑–¥–∞–Ω–∏–µ backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          cp .env .env.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
          
          # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
          docker compose down
          
          # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
          docker compose pull
          
          # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
          docker image prune -f
          
          # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
          docker compose up -d
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
          sleep 10
          docker compose ps
        EOF

    - name: Health Check
      run: |
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–Ω—è—Ç–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        sleep 30
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        curl -f ${{ secrets.REMOTE_URL }}/api/health/ || exit 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        curl -f ${{ secrets.REMOTE_URL }} || exit 1

    - name: Notify success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üéâ Deployment successful! ${{ secrets.REMOTE_URL }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'üö® Deployment failed! Check logs.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ release –ø—Ä–∏ —Ç–µ–≥–∞—Ö
  release:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes
          - Automated release from CI/CD pipeline
          - Docker images: 
            - `gimmyhat/strain-collection-backend:${{ github.ref_name }}`
            - `gimmyhat/strain-collection-frontend:${{ github.ref_name }}`
        draft: false
        prerelease: false 