services:
  db:
    image: postgres:14-alpine
    container_name: strain_db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./logs:/var/log/postgresql
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-strain_db}
      - POSTGRES_USER=${POSTGRES_USER:-strain_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-strain_secure_password_2024}
      - TZ=${TZ:-Europe/Moscow}
    ports:
      - "5433:5432"
    networks:
      - strain_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: strain_backend
    restart: unless-stopped
    volumes:
      - ./backups:/app/backups
      - ../data:/app/data:ro
      - ./logs:/app/logs
      - ../scripts:/app/scripts:ro
      - media_files:/app/media
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-strain_db}
      - DB_USER=${POSTGRES_USER:-strain_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-strain_secure_password_2024}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-your-very-secure-secret-key-change-in-production}
      - DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - TZ=${TZ:-Europe/Moscow}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - strain_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "echo 'üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...' && \
        python manage.py migrate && \
        echo '‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã' && \
        python manage.py collectstatic --noinput --clear && \
        echo '‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã' && \
        if [ `python manage.py shell -c 'from strain_management.models import Strain; print(Strain.objects.count())'` -eq 0 ]; then \
          echo 'ü§î –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç...' && \
          python manage.py import_csv_data --table=all --force && \
          echo '‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω'; \
        else \
          echo '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ. –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω.'; \
        fi && \
        echo 'üöÄ –ó–∞–ø—É—Å–∫ Gunicorn —Å–µ—Ä–≤–µ—Ä–∞...' && \
        exec gunicorn --bind 0.0.0.0:8000 --workers 3 --worker-class gthread --threads 2 --worker-connections 1000 --max-requests 1000 --max-requests-jitter 100 --timeout 30 --keep-alive 2 --access-logfile /app/logs/access.log --error-logfile /app/logs/error.log --log-level info strain_tracker_project.wsgi:application"

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: strain_frontend
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./logs:/var/log/nginx
      - media_files:/usr/share/nginx/html/media
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - strain_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s



volumes:
  postgres_data:
    driver: local
  media_files:
    driver: local

networks:
  strain_network:
    driver: bridge 
    ipam:
      config:
        - subnet: 172.20.0.0/16