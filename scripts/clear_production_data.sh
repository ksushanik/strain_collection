#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/clear_production_data.sh [--force]
# 
# –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
# –ü–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è.

set -e

REMOTE_HOST="4feb"
REMOTE_DIR="~/strain_ultra_minimal"
FORCE=${1:-""}

echo "üßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –ü–†–û–î–ê–ö–®–ù –ë–ê–ó–´ –î–ê–ù–ù–´–•"
echo "üìÖ –î–∞—Ç–∞: $(date '+%Y-%m-%d %H:%M:%S')"
echo "üåê –°–µ—Ä–≤–µ—Ä: $REMOTE_HOST"
echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $REMOTE_DIR"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
run_remote() {
    local cmd="$1"
    echo "üîß –í—ã–ø–æ–ª–Ω—è—é: $cmd"
    ssh $REMOTE_HOST "cd $REMOTE_DIR && $cmd"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
if ! ssh -o ConnectTimeout=5 $REMOTE_HOST "echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'"; then
    echo "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $REMOTE_HOST"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
echo "üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞..."
if ! ssh $REMOTE_HOST "[ -d $REMOTE_DIR ]"; then
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $REMOTE_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
if ! run_remote "docker compose ps backend | grep -q 'healthy\|running'"; then
    echo "‚ùå Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤"
    echo "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: make deploy-prod"
    exit 1
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
run_remote "docker compose exec backend python manage.py shell -c \"
from collection_manager.models import *
print(f'–®—Ç–∞–º–º—ã: {Strain.objects.count()}')
print(f'–û–±—Ä–∞–∑—Ü—ã: {Sample.objects.count()}')
print(f'–•—Ä–∞–Ω–∏–ª–∏—â–µ: {Storage.objects.count()}')
print(f'–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {Source.objects.count()}')
print(f'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {Location.objects.count()}')
\""

echo ""
echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í–°–ï –î–ê–ù–ù–´–ï –ë–£–î–£–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ï–ù–´!"
echo "üìã –ë—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:"
echo "   - –®—Ç–∞–º–º—ã (Strains)"
echo "   - –û–±—Ä–∞–∑—Ü—ã (Samples)"
echo "   - –•—Ä–∞–Ω–∏–ª–∏—â–µ (Storage)"
echo "   - –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (Sources)"
echo "   - –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (Locations)"
echo "   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (Comments)"
echo "   - –ü—Ä–∏–º–µ—á–∞–Ω–∏—è (AppendixNotes)"
echo "   - –ò–Ω–¥–µ–∫—Å–Ω—ã–µ –±—É–∫–≤—ã (IndexLetters)"

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ --force
if [ "$FORCE" != "--force" ]; then
    echo ""
    echo "üõë –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '–û–ß–ò–°–¢–ò–¢–¨ –î–ê–ù–ù–´–ï' (—Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ):"
    read -r confirmation
    if [ "$confirmation" != "–û–ß–ò–°–¢–ò–¢–¨ –î–ê–ù–ù–´–ï" ]; then
        echo "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 1
    fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
echo ""
echo "üì• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π..."
BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="backup_before_clear_${BACKUP_TIMESTAMP}.sql.gz"

run_remote "docker compose exec db pg_dump -U \$POSTGRES_USER \$POSTGRES_DB | gzip > backups/$BACKUP_NAME"

echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_NAME"

# –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
echo ""
echo "üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö..."

# –°–æ–∑–¥–∞–µ–º Django –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
run_remote "docker compose exec backend python manage.py shell -c \"
from collection_manager.models import *
from django.db import transaction

print('üîÑ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...')

with transaction.atomic():
    # –û—á–∏—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏)
    sample_count = Sample.objects.count()
    Sample.objects.all().delete()
    print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {sample_count}')
    
    strain_count = Strain.objects.count()
    Strain.objects.all().delete()
    print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ —à—Ç–∞–º–º–æ–≤: {strain_count}')
    
    storage_count = Storage.objects.count()
    Storage.objects.all().delete()
    print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage_count}')
    
    source_count = Source.objects.count()
    Source.objects.all().delete()
    print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {source_count}')
    
    location_count = Location.objects.count()
    Location.objects.all().delete()
    print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π: {location_count}')
    
    comment_count = Comment.objects.count()
    Comment.objects.all().delete()
    print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comment_count}')
    
    appendix_count = AppendixNote.objects.count()
    AppendixNote.objects.all().delete()
    print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π: {appendix_count}')
    
    index_count = IndexLetter.objects.count()
    IndexLetter.objects.all().delete()
    print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–Ω—ã—Ö –±—É–∫–≤: {index_count}')

print('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!')
\""

# –°–±—Ä–æ—Å sequences –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã auto-increment
echo ""
echo "üîÑ –°–±—Ä–æ—Å sequences –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã auto-increment..."
run_remote "docker compose exec backend python manage.py shell -c \"
from django.db import connection
from collection_manager.models import *

models = [Strain, Sample, Storage, Source, Location, Comment, AppendixNote, IndexLetter]

with connection.cursor() as cursor:
    for model in models:
        table_name = model._meta.db_table
        pk_column = model._meta.pk.column
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è sequence
        cursor.execute(\\\"SELECT pg_get_serial_sequence(%s, %s)\\\", [table_name, pk_column])
        sequence_name = cursor.fetchone()[0]
        
        if sequence_name:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º sequence –Ω–∞ 1
            cursor.execute(f\\\"ALTER SEQUENCE {sequence_name} RESTART WITH 1\\\")
            print(f'‚úÖ –°–±—Ä–æ—à–µ–Ω sequence –¥–ª—è {table_name}')

print('üéâ –í—Å–µ sequences —Å–±—Ä–æ—à–µ–Ω—ã!')
\""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—á–∏—Å—Ç–∫–∏:"
run_remote "docker compose exec backend python manage.py shell -c \"
from collection_manager.models import *
print(f'–®—Ç–∞–º–º—ã: {Strain.objects.count()}')
print(f'–û–±—Ä–∞–∑—Ü—ã: {Sample.objects.count()}')
print(f'–•—Ä–∞–Ω–∏–ª–∏—â–µ: {Storage.objects.count()}')
print(f'–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {Source.objects.count()}')
print(f'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {Location.objects.count()}')
print(f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {Comment.objects.count()}')
print(f'–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {AppendixNote.objects.count()}')
print(f'–ò–Ω–¥–µ–∫—Å–Ω—ã–µ –±—É–∫–≤—ã: {IndexLetter.objects.count()}')
\""

echo ""
echo "‚úÖ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!"
echo ""
echo "üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:"
echo "   1. ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $BACKUP_NAME"
echo "   2. ‚úÖ –û—á–∏—â–µ–Ω—ã –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö"
echo "   3. ‚úÖ –°–±—Ä–æ—à–µ–Ω—ã sequences –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
echo ""
echo "üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:"
echo "   üåê https://culturedb.elcity.ru"
echo "   üîë –õ–æ–≥–∏–Ω –≤ –∞–¥–º–∏–Ω–∫—É: admin / admin123"
echo ""
echo "üîÑ –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   ./scripts/restore_production.sh /backups/$BACKUP_NAME"
echo ""
echo "üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
echo "   make status-prod"
echo "   make logs-prod" 