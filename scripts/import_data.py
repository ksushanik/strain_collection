#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤ –≤ PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
—á–µ—Ä–µ–∑ –º–æ–¥–µ–ª–∏ Django —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π Pydantic
"""

import os
import sys
import django
import pandas as pd
from pathlib import Path
from pydantic import ValidationError

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
backend_path = project_root / 'backend'
sys.path.append(str(backend_path))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'strain_tracker_project.settings')
django.setup()

from collection_manager.models import (
    IndexLetter, Location, Source, Comment, AppendixNote,
    Storage, Strain, Sample
)
from collection_manager.schemas import (
    ImportIndexLetterSchema, ImportLocationSchema, ImportSourceSchema,
    ImportCommentSchema, ImportAppendixNoteSchema, ImportStorageSchema,
    ImportStrainSchema, ImportSampleSchema,
    validate_csv_row, validate_boolean_from_csv
)


def str_to_bool(value):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    if pd.isna(value) or value == "":
        return False
    return str(value).lower() in ['true', '1', 'yes', '–¥–∞', '+']


def import_index_letters():
    """–ò–º–ø–æ—Ä—Ç –∏–Ω–¥–µ–∫—Å–Ω—ã—Ö –±—É–∫–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    print("üìù –ò–º–ø–æ—Ä—Ç –∏–Ω–¥–µ–∫—Å–Ω—ã—Ö –±—É–∫–≤...")
    df = pd.read_csv(project_root / 'data' / 'IndexLetters_Table.csv')
    
    validated_count = 0
    for index, row in df.iterrows():
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            validated_data = validate_csv_row(
                ImportIndexLetterSchema, 
                row.to_dict(), 
                row_number=index + 2  # +2 –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å 1
            )
            
            IndexLetter.objects.get_or_create(
                id=validated_data.IndexLetterID,
                defaults={'letter_value': validated_data.IndexLetterValue}
            )
            validated_count += 1
            
        except (ValidationError, ValueError) as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {e}")
            continue
    
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {validated_count} –∏–∑ {len(df)} –∏–Ω–¥–µ–∫—Å–Ω—ã—Ö –±—É–∫–≤")


def import_locations():
    """–ò–º–ø–æ—Ä—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    print("üåç –ò–º–ø–æ—Ä—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π...")
    df = pd.read_csv(project_root / 'data' / 'Locations_Table.csv')
    
    validated_count = 0
    for index, row in df.iterrows():
        try:
            validated_data = validate_csv_row(
                ImportLocationSchema, 
                row.to_dict(), 
                row_number=index + 2
            )
            
            Location.objects.get_or_create(
                id=validated_data.LocationID,
                defaults={'name': validated_data.LocationNameValue}
            )
            validated_count += 1
            
        except (ValidationError, ValueError) as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {e}")
            continue
    
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {validated_count} –∏–∑ {len(df)} –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π")


def import_sources():
    """–ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    print("üî¨ –ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    df = pd.read_csv(project_root / 'data' / 'Sources_Table.csv')
    
    validated_count = 0
    for index, row in df.iterrows():
        try:
            validated_data = validate_csv_row(
                ImportSourceSchema, 
                row.to_dict(), 
                row_number=index + 2
            )
            
            Source.objects.get_or_create(
                id=validated_data.SourceID,
                defaults={
                    'organism_name': validated_data.SourceOrganismName,
                    'source_type': validated_data.SourceTypeName,
                    'category': validated_data.SourceCategoryName
                }
            )
            validated_count += 1
            
        except (ValidationError, ValueError) as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {e}")
            continue
    
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {validated_count} –∏–∑ {len(df)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")


def import_comments():
    """–ò–º–ø–æ—Ä—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    print("üí¨ –ò–º–ø–æ—Ä—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    df = pd.read_csv(project_root / 'data' / 'Comments_Table.csv')
    
    validated_count = 0
    for index, row in df.iterrows():
        try:
            validated_data = validate_csv_row(
                ImportCommentSchema, 
                row.to_dict(), 
                row_number=index + 2
            )
            
            Comment.objects.get_or_create(
                id=validated_data.CommentID,
                defaults={'text': validated_data.CommentTextValue}
            )
            validated_count += 1
            
        except (ValidationError, ValueError) as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {e}")
            continue
    
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {validated_count} –∏–∑ {len(df)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")


def import_appendix_notes():
    """–ò–º–ø–æ—Ä—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    print("üìã –ò–º–ø–æ—Ä—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–π...")
    df = pd.read_csv(project_root / 'data' / 'AppendixNotes_Table.csv')
    
    validated_count = 0
    for index, row in df.iterrows():
        try:
            validated_data = validate_csv_row(
                ImportAppendixNoteSchema, 
                row.to_dict(), 
                row_number=index + 2
            )
            
            AppendixNote.objects.get_or_create(
                id=validated_data.AppendixNoteID,
                defaults={'text': validated_data.AppendixNoteText}
            )
            validated_count += 1
            
        except (ValidationError, ValueError) as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {e}")
            continue
    
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {validated_count} –∏–∑ {len(df)} –ø—Ä–∏–º–µ—á–∞–Ω–∏–π")


def import_storage():
    """–ò–º–ø–æ—Ä—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    print("üì¶ –ò–º–ø–æ—Ä—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏...")
    df = pd.read_csv(project_root / 'data' / 'Storage_Table.csv')
    
    validated_count = 0
    for index, row in df.iterrows():
        try:
            validated_data = validate_csv_row(
                ImportStorageSchema, 
                row.to_dict(), 
                row_number=index + 2
            )
            
            Storage.objects.get_or_create(
                id=validated_data.StorageID,
                defaults={
                    'box_id': validated_data.BoxIDValue,
                    'cell_id': validated_data.CellIDValue
                }
            )
            validated_count += 1
            
        except (ValidationError, ValueError) as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {e}")
            continue
    
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {validated_count} –∏–∑ {len(df)} –∑–∞–ø–∏—Å–µ–π –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏")


def import_strains():
    """–ò–º–ø–æ—Ä—Ç —à—Ç–∞–º–º–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    print("ü¶† –ò–º–ø–æ—Ä—Ç —à—Ç–∞–º–º–æ–≤...")
    df = pd.read_csv(project_root / 'data' / 'Strains_Table.csv')
    
    validated_count = 0
    for index, row in df.iterrows():
        try:
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            row_dict = row.to_dict()
            for key, value in row_dict.items():
                if pd.isna(value) or value == "":
                    row_dict[key] = None
            
            validated_data = validate_csv_row(
                ImportStrainSchema, 
                row_dict, 
                row_number=index + 2
            )
            
            Strain.objects.get_or_create(
                id=validated_data.StrainID,
                defaults={
                    'short_code': validated_data.ShortStrainCode,
                    'rrna_taxonomy': validated_data.RRNATaxonomy,
                    'identifier': validated_data.StrainIdentifierValue,
                    'name_alt': validated_data.StrainNameAlt,
                    'rcam_collection_id': validated_data.RCAMCollectionID
                }
            )
            validated_count += 1
            
        except (ValidationError, ValueError) as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {e}")
            continue
    
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {validated_count} –∏–∑ {len(df)} —à—Ç–∞–º–º–æ–≤")


def import_samples():
    """–ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–∑—Ü–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    print("üß™ –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–∑—Ü–æ–≤...")
    df = pd.read_csv(project_root / 'data' / 'Samples_Table.csv')
    
    validated_count = 0
    for index, row in df.iterrows():
        try:
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            row_dict = row.to_dict()
            for key, value in row_dict.items():
                if pd.isna(value) or value == "":
                    row_dict[key] = None if '_FK' in key or key == 'OriginalSampleNumber' else ""
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                elif key.startswith('Has') or key == 'IsIdentified' or key == 'SEQStatus':
                    row_dict[key] = str(value).lower()
            
            validated_data = validate_csv_row(
                ImportSampleSchema, 
                row_dict, 
                row_number=index + 2
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫)
            def get_foreign_object(model_class, field_id):
                if field_id is None:
                    return None
                try:
                    return model_class.objects.get(id=field_id)
                except model_class.DoesNotExist:
                    print(f"‚ö†Ô∏è  {model_class.__name__} —Å ID {field_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
            
            index_letter = get_foreign_object(IndexLetter, validated_data.IndexLetterID_FK)
            strain = get_foreign_object(Strain, validated_data.StrainID_FK)
            storage = get_foreign_object(Storage, validated_data.StorageID_FK)
            source = get_foreign_object(Source, validated_data.SourceID_FK)
            location = get_foreign_object(Location, validated_data.LocationID_FK)
            appendix_note = get_foreign_object(AppendixNote, validated_data.AppendixNoteID_FK)
            comment = get_foreign_object(Comment, validated_data.CommentID_FK)
            
            Sample.objects.get_or_create(
                id=validated_data.SampleRowID,
                defaults={
                    'index_letter': index_letter,
                    'strain': strain,
                    'storage': storage,
                    'original_sample_number': validated_data.OriginalSampleNumber,
                    'source': source,
                    'location': location,
                    'appendix_note': appendix_note,
                    'comment': comment,
                    'has_photo': validate_boolean_from_csv(validated_data.HasPhoto),
                    'is_identified': validate_boolean_from_csv(validated_data.IsIdentified),
                    'has_antibiotic_activity': validate_boolean_from_csv(validated_data.HasAntibioticActivity),
                    'has_genome': validate_boolean_from_csv(validated_data.HasGenome),
                    'has_biochemistry': validate_boolean_from_csv(validated_data.HasBiochemistry),
                    'seq_status': validate_boolean_from_csv(validated_data.SEQStatus)
                }
            )
            validated_count += 1
            
        except (ValidationError, ValueError) as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {e}")
            continue
    
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {validated_count} –∏–∑ {len(df)} –æ–±—Ä–∞–∑—Ü–æ–≤")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤...")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, –ø–æ—Ç–æ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
    try:
        import_index_letters()
        import_locations()
        import_sources()
        import_comments()
        import_appendix_notes()
        import_storage()
        import_strains()
        import_samples()
        
        print("=" * 50)
        print("üéâ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:")
        print(f"- –ò–Ω–¥–µ–∫—Å–Ω—ã–µ –±—É–∫–≤—ã: {IndexLetter.objects.count()}")
        print(f"- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {Location.objects.count()}")
        print(f"- –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {Source.objects.count()}")
        print(f"- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {Comment.objects.count()}")
        print(f"- –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {AppendixNote.objects.count()}")
        print(f"- –•—Ä–∞–Ω–∏–ª–∏—â–∞: {Storage.objects.count()}")
        print(f"- –®—Ç–∞–º–º—ã: {Strain.objects.count()}")
        print(f"- –û–±—Ä–∞–∑—Ü—ã: {Sample.objects.count()}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        empty_cells = Sample.objects.filter(strain__isnull=True, original_sample_number__isnull=True).count()
        occupied_cells = Sample.objects.filter(strain__isnull=False).count()
        print(f"\nüìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"- –ó–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏: {occupied_cells}")
        print(f"- –°–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏: {empty_cells}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()