#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/restore_production.sh <backup_file> [--force]
# –ü—Ä–∏–º–µ—Ä: ./scripts/restore_production.sh /backups/backup_before_clear_20250123_143022.sql.gz

set -e

REMOTE_HOST="4feb"
REMOTE_DIR="~/strain_ultra_minimal"
BACKUP_FILE="$1"
FORCE="$2"

if [ -z "$BACKUP_FILE" ]; then
    echo "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    echo ""
    echo "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/restore_production.sh <backup_file> [--force]"
    echo "üìã –ü—Ä–∏–º–µ—Ä—ã:"
    echo "   ./scripts/restore_production.sh /backups/backup_before_clear_20250123_143022.sql.gz"
    echo "   ./scripts/restore_production.sh /backups/backup_20250123_120000.sql.gz --force"
    echo ""
    echo "üìÇ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backup'–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
    echo "   ssh $REMOTE_HOST 'ls -la ~/strain_ultra_minimal/backups/'"
    exit 1
fi

echo "üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò"
echo "üìÖ –î–∞—Ç–∞: $(date '+%Y-%m-%d %H:%M:%S')"
echo "üåê –°–µ—Ä–≤–µ—Ä: $REMOTE_HOST"
echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $REMOTE_DIR"
echo "üíæ Backup —Ñ–∞–π–ª: $BACKUP_FILE"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
run_remote() {
    local cmd="$1"
    echo "üîß –í—ã–ø–æ–ª–Ω—è—é: $cmd"
    ssh $REMOTE_HOST "cd $REMOTE_DIR && $cmd"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
if ! ssh -o ConnectTimeout=5 $REMOTE_HOST "echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'"; then
    echo "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $REMOTE_HOST"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ backup —Ñ–∞–π–ª–∞
echo "üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è backup —Ñ–∞–π–ª–∞..."
if ! ssh $REMOTE_HOST "[ -f $REMOTE_DIR/$BACKUP_FILE ]"; then
    echo "‚ùå –§–∞–π–ª $BACKUP_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    echo ""
    echo "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ backup —Ñ–∞–π–ª—ã:"
    ssh $REMOTE_HOST "ls -la $REMOTE_DIR/backups/ | grep -E '\\.sql(\\.gz)?$' | tail -10"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
if ! run_remote "docker compose ps backend | grep -q 'healthy\|running'"; then
    echo "‚ùå Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤"
    echo "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: make deploy-prod"
    exit 1
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ backup —Ñ–∞–π–ª–µ
echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ backup —Ñ–∞–π–ª–µ:"
ssh $REMOTE_HOST "ls -lh $REMOTE_DIR/$BACKUP_FILE"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo ""
echo "üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
run_remote "docker compose exec backend python manage.py shell -c \"
from collection_manager.models import *
print(f'–®—Ç–∞–º–º—ã: {Strain.objects.count()}')
print(f'–û–±—Ä–∞–∑—Ü—ã: {Sample.objects.count()}')
print(f'–•—Ä–∞–Ω–∏–ª–∏—â–µ: {Storage.objects.count()}')
print(f'–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {Source.objects.count()}')
print(f'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {Location.objects.count()}')
\""

echo ""
echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï –ë–£–î–£–¢ –ó–ê–ú–ï–ù–ï–ù–´ –ù–ê –î–ê–ù–ù–´–ï –ò–ó BACKUP'–ê!"
echo "üìã –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:"
echo "   1. –°–æ–∑–¥–∞–Ω–∏–µ backup'–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
echo "   2. –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"
echo "   3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ backup'–∞"
echo "   4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ --force
if [ "$FORCE" != "--force" ]; then
    echo ""
    echo "üõë –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '–í–û–°–°–¢–ê–ù–û–í–ò–¢–¨' (—Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ):"
    read -r confirmation
    if [ "$confirmation" != "–í–û–°–°–¢–ê–ù–û–í–ò–¢–¨" ]; then
        echo "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 1
    fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ backup'–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
echo ""
echo "üì• –°–æ–∑–¥–∞–Ω–∏–µ backup'–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è..."
CURRENT_BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
CURRENT_BACKUP_NAME="backup_before_restore_${CURRENT_BACKUP_TIMESTAMP}.sql.gz"

run_remote "docker compose exec db pg_dump -U \$POSTGRES_USER \$POSTGRES_DB | gzip > backups/$CURRENT_BACKUP_NAME"

echo "‚úÖ Backup —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω: $CURRENT_BACKUP_NAME"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
echo ""
echo "üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç backup —Ñ–∞–π–ª–∞ (—Å–∂–∞—Ç—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π)
if [[ "$BACKUP_FILE" == *.gz ]]; then
    echo "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–∂–∞—Ç–æ–≥–æ backup —Ñ–∞–π–ª–∞..."
    RESTORE_CMD="gunzip -c $BACKUP_FILE | docker compose exec -T db psql -U \$POSTGRES_USER \$POSTGRES_DB"
else
    echo "üìÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ SQL —Ñ–∞–π–ª–∞..."
    RESTORE_CMD="docker compose exec -T db psql -U \$POSTGRES_USER \$POSTGRES_DB < $BACKUP_FILE"
fi

# –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
echo "üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
run_remote "docker compose exec backend python manage.py shell -c \"
from collection_manager.models import *
from django.db import transaction

print('üîÑ –û—á–∏—â–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')

with transaction.atomic():
    Sample.objects.all().delete()
    Strain.objects.all().delete()
    Storage.objects.all().delete()
    Source.objects.all().delete()
    Location.objects.all().delete()
    Comment.objects.all().delete()
    AppendixNote.objects.all().delete()
    IndexLetter.objects.all().delete()

print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞')
\""

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
echo "üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ backup'–∞..."
if [[ "$BACKUP_FILE" == *.gz ]]; then
    run_remote "gunzip -c $BACKUP_FILE | docker compose exec -T db psql -U \$POSTGRES_USER \$POSTGRES_DB"
else
    run_remote "docker compose exec -T db psql -U \$POSTGRES_USER \$POSTGRES_DB < $BACKUP_FILE"
fi

# –°–±—Ä–æ—Å sequences –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
echo ""
echo "üîÑ –°–±—Ä–æ—Å sequences..."
run_remote "docker compose exec backend python manage.py shell -c \"
from django.db import connection
from collection_manager.models import *

models = [Strain, Sample, Storage, Source, Location, Comment, AppendixNote, IndexLetter]

with connection.cursor() as cursor:
    for model in models:
        table_name = model._meta.db_table
        pk_column = model._meta.pk.column
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è sequence
        cursor.execute(\\\"SELECT pg_get_serial_sequence(%s, %s)\\\", [table_name, pk_column])
        sequence_name = cursor.fetchone()[0]
        
        if sequence_name:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º sequence –Ω–∞ MAX(id) + 1
            cursor.execute(f\\\"SELECT setval('{sequence_name}', COALESCE((SELECT MAX({pk_column}) FROM {table_name}), 1) + 1, false)\\\")
            print(f'‚úÖ –°–±—Ä–æ—à–µ–Ω sequence –¥–ª—è {table_name}')

print('üéâ –í—Å–µ sequences —Å–±—Ä–æ—à–µ–Ω—ã!')
\""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:"
run_remote "docker compose exec backend python manage.py shell -c \"
from collection_manager.models import *
print(f'–®—Ç–∞–º–º—ã: {Strain.objects.count()}')
print(f'–û–±—Ä–∞–∑—Ü—ã: {Sample.objects.count()}')
print(f'–•—Ä–∞–Ω–∏–ª–∏—â–µ: {Storage.objects.count()}')
print(f'–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {Source.objects.count()}')
print(f'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {Location.objects.count()}')
print(f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {Comment.objects.count()}')
print(f'–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {AppendixNote.objects.count()}')
print(f'–ò–Ω–¥–µ–∫—Å–Ω—ã–µ –±—É–∫–≤—ã: {IndexLetter.objects.count()}')
\""

echo ""
echo "‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!"
echo ""
echo "üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:"
echo "   1. ‚úÖ –°–æ–∑–¥–∞–Ω backup —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: $CURRENT_BACKUP_NAME"
echo "   2. ‚úÖ –û—á–∏—â–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
echo "   3. ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑: $BACKUP_FILE"
echo "   4. ‚úÖ –°–±—Ä–æ—à–µ–Ω—ã sequences –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
echo ""
echo "üåê –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: https://culturedb.elcity.ru"
echo "üîë –õ–æ–≥–∏–Ω –≤ –∞–¥–º–∏–Ω–∫—É: admin / admin123"
echo ""
echo "üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
echo "   make status-prod"
echo "   make logs-prod" 