#!/bin/bash

# =============================================================================
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ —à—Ç–∞–º–º–æ–≤ –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤
# =============================================================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Docker
    if ! docker ps &> /dev/null; then
        error "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Docker. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker."
    fi
    
    log "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
create_env_file() {
    log "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .env..."
    
    if [ -f .env ]; then
        warn ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ."
        return
    fi
    
    cat > .env << 'EOF'
# =============================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ —à—Ç–∞–º–º–æ–≤ –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤
# =============================================================================

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
POSTGRES_DB=strain_db
POSTGRES_USER=strain_user
POSTGRES_PASSWORD=strain_secure_password_2024
POSTGRES_HOST=db
POSTGRES_PORT=5432

# Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DJANGO_SECRET_KEY=your-very-secure-secret-key-change-in-production
DJANGO_DEBUG=False
DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–∏–∑–º–µ–Ω–∏—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
CSRF_TRUSTED_ORIGINS=http://localhost,http://127.0.0.1

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TZ=Europe/Moscow
EOF
    
    log "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    log "üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    mkdir -p data/certbot/conf
    mkdir -p data/certbot/www
    mkdir -p backups
    mkdir -p logs
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    chmod 755 data backups logs
    chmod 755 data/certbot data/certbot/conf data/certbot/www
    
    log "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
check_data_files() {
    log "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞..."
    
    required_files=(
        "data/Strains_Table.csv"
        "data/Samples_Table.csv"
        "data/Storage_Table.csv"
        "data/IndexLetters_Table.csv"
        "data/Sources_Table.csv"
        "data/Locations_Table.csv"
        "data/AppendixNotes_Table.csv"
        "data/Comments_Table.csv"
    )
    
    missing_files=()
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            missing_files+=("$file")
        fi
    done
    
    if [ ${#missing_files[@]} -gt 0 ]; then
        warn "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö:"
        for file in "${missing_files[@]}"; do
            warn "  - $file"
        done
        warn "–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ —Å –ø—É—Å—Ç–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."
        warn "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV —Ñ–∞–π–ª—ã."
        return 1
    fi
    
    log "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã"
    return 0
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
deploy_containers() {
    log "üê≥ –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down 2>/dev/null || true
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
    info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    info "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    timeout=60
    while [ $timeout -gt 0 ]; do
        if docker-compose exec -T db pg_isready -U $POSTGRES_USER -d $POSTGRES_DB &>/dev/null; then
            break
        fi
        sleep 2
        ((timeout-=2))
    done
    
    if [ $timeout -le 0 ]; then
        error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs db"
    fi
    
    log "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database() {
    log "üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Django..."
    docker-compose exec -T backend python manage.py migrate
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    info "–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    docker-compose exec -T backend python manage.py shell << 'EOF'
from django.contrib.auth.models import User
import os

username = 'admin'
email = 'admin@strain-system.local'
password = 'admin123'

if not User.objects.filter(username=username).exists():
    User.objects.create_superuser(username, email, password)
    print(f"–°–æ–∑–¥–∞–Ω —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    print(f"–ü–∞—Ä–æ–ª—å: {password}")
    print("–í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!")
else:
    print(f"–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
EOF
    
    log "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
}

# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
import_data() {
    if check_data_files; then
        log "üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤..."
        
        # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        docker-compose exec -T backend python manage.py import_csv_data --table=all
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞
        info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞..."
        docker-compose exec -T backend python manage.py shell << 'EOF'
from collection_manager.models import Strain, Sample, Storage

strains_count = Strain.objects.count()
samples_count = Sample.objects.count()
storage_count = Storage.objects.count()

print(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
print(f"  - –®—Ç–∞–º–º—ã: {strains_count}")
print(f"  - –û–±—Ä–∞–∑—Ü—ã: {samples_count}")
print(f"  - –•—Ä–∞–Ω–∏–ª–∏—â–µ: {storage_count}")
EOF
        
        log "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
    else
        warn "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
health_check() {
    log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    info "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose ps
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
    timeout=30
    while [ $timeout -gt 0 ]; do
        if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q "200\|301\|302"; then
            log "‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost"
            break
        fi
        sleep 2
        ((timeout-=2))
    done
    
    if [ $timeout -le 0 ]; then
        warn "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs nginx"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ API..."
    if curl -s http://localhost/api/health | grep -q "healthy"; then
        log "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        warn "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs backend"
    fi
}

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
show_system_info() {
    log "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ:"
    echo
    echo -e "${BLUE}üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:${NC} http://localhost"
    echo -e "${BLUE}üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:${NC} http://localhost/admin/"
    echo -e "${BLUE}üì° API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${NC} http://localhost/api/"
    echo
    echo -e "${BLUE}üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø:${NC}"
    echo -e "   –õ–æ–≥–∏–Ω: ${YELLOW}admin${NC}"
    echo -e "   –ü–∞—Ä–æ–ª—å: ${YELLOW}admin123${NC}"
    echo -e "   ${RED}‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!${NC}"
    echo
    echo -e "${BLUE}üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL:${NC}"
    echo -e "   –•–æ—Å—Ç: localhost:5433"
    echo -e "   –ë–∞–∑–∞: strain_db"
    echo -e "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: strain_user"
    echo
    echo -e "${BLUE}üìÇ –í–∞–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:${NC}"
    echo -e "   –ë—ç–∫–∞–ø—ã: ./backups/"
    echo -e "   –î–∞–Ω–Ω—ã–µ: ./data/"
    echo -e "   –õ–æ–≥–∏: ./logs/"
    echo
    echo -e "${GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞!${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}"
    echo "============================================================================="
    echo "    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ —à—Ç–∞–º–º–æ–≤ –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤"
    echo "============================================================================="
    echo -e "${NC}"
    
    check_requirements
    create_env_file
    create_directories
    deploy_containers
    init_database
    import_data
    health_check
    show_system_info
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi 