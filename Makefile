# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —É—á–µ—Ç–∞ —à—Ç–∞–º–º–æ–≤ –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤

.PHONY: help setup start stop restart import clean test

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(BLUE)=============================================================================$(NC)"
	@echo "$(BLUE)    –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ —à—Ç–∞–º–º–æ–≤ –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è$(NC)"
	@echo "$(BLUE)=============================================================================$(NC)"
	@echo ""
	@echo "$(GREEN)üöÄ –ë–´–°–¢–†–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï:$(NC)"
	@echo "  $(YELLOW)quick-deploy$(NC)  - –ü–æ–ª–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Docker"
	@echo "  $(YELLOW)deploy-prod$(NC)   - –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"
	@echo "  $(YELLOW)deploy-clean$(NC)  - –ß–∏—Å—Ç–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (—É–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)"
	@echo "  $(YELLOW)deploy-dev$(NC)    - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo ""
	@echo "$(GREEN)üîß DOCKER –£–ü–†–ê–í–õ–ï–ù–ò–ï:$(NC)"
	@echo "  $(YELLOW)docker-up$(NC)     - –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "  $(YELLOW)docker-down$(NC)   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "  $(YELLOW)docker-build$(NC)  - –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"
	@echo "  $(YELLOW)docker-logs$(NC)   - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo ""
	@echo "$(GREEN)üîß –õ–û–ö–ê–õ–¨–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê:$(NC)"
	@echo "  $(YELLOW)dev-setup$(NC)      - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –ë–î –≤ Docker)"
	@echo "  $(YELLOW)dev-start$(NC)      - –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "  $(YELLOW)dev-backend$(NC)    - –ó–∞–ø—É—Å–∫ Django backend –ª–æ–∫–∞–ª—å–Ω–æ"
	@echo "  $(YELLOW)dev-frontend$(NC)   - –ó–∞–ø—É—Å–∫ React frontend –ª–æ–∫–∞–ª—å–Ω–æ"
	@echo "  $(YELLOW)dev-stop$(NC)       - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo ""
	@echo "$(GREEN)üé® –§–†–û–ù–¢–ï–ù–î –£–ü–†–ê–í–õ–ï–ù–ò–ï:$(NC)"
	@echo "  $(YELLOW)frontend-build$(NC)  - –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"
	@echo "  $(YELLOW)frontend-deploy$(NC) - –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ Docker"
	@echo "  $(YELLOW)frontend-dev$(NC)    - –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ dev —Ä–µ–∂–∏–º–µ"
	@echo ""
	@echo "$(GREEN)üîß –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -v "deploy\|docker\|dev-" | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}'

setup: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(GREEN)üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	@echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã..."
	cd backend && python3 -m venv strain_venv
	@echo "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	cd backend && . strain_venv/bin/activate && pip install -r requirements.txt
	@echo "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	cd backend && cp env_example .env || true
	@echo "$(GREEN)‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"

db-start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	@echo "$(GREEN)üêò –ó–∞–ø—É—Å–∫ PostgreSQL...$(NC)"
	docker compose up -d
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	sleep 10

db-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	@echo "$(RED)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL...$(NC)"
	docker compose down

db-restart: db-stop db-start ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL

migrate: ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ Django
	@echo "$(BLUE)üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py makemigrations
	cd backend && . strain_venv/bin/activate && python manage.py migrate

import: ## –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤
	@echo "$(GREEN)üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV...$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/import_data.py

start: db-start migrate ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Django —Å–µ—Ä–≤–µ—Ä
	@echo "$(GREEN)üåü –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py runserver 0.0.0.0:8000

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py runserver

admin: ## –°–æ–∑–¥–∞—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	@echo "$(BLUE)üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py createsuperuser

shell: ## –û—Ç–∫—Ä—ã—Ç—å Django shell
	cd backend && . strain_venv/bin/activate && python manage.py shell

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py test

clean-db: ## –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	@echo "$(RED)üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py shell -c "from collection_manager.models import *; Sample.objects.all().delete(); Strain.objects.all().delete(); Storage.objects.all().delete(); print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞')"

full-import: clean-db import ## –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	@echo "$(GREEN)üîÑ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ PostgreSQL
	docker compose logs -f db

status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:$(NC)"
	@echo "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
	docker compose ps
	@echo "\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
	cd backend && . strain_venv/bin/activate && python manage.py shell -c "from collection_manager.models import *; print(f'–®—Ç–∞–º–º—ã: {Strain.objects.count()}'); print(f'–û–±—Ä–∞–∑—Ü—ã: {Sample.objects.count()}'); print(f'–•—Ä–∞–Ω–∏–ª–∏—â–∞: {Storage.objects.count()}')"

# === BACKUP –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï ===

backup-create: ## –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(YELLOW)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ backup...$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/backup_database.py create --type full
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω—ã–π backup —Å–æ–∑–¥–∞–Ω$(NC)"

backup-schema: ## –°–æ–∑–¥–∞—Ç—å backup —Ç–æ–ª—å–∫–æ —Å—Ö–µ–º—ã –ë–î
	@echo "$(YELLOW)üìã –°–æ–∑–¥–∞–Ω–∏–µ backup —Å—Ö–µ–º—ã...$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/backup_database.py create --type schema
	@echo "$(GREEN)‚úÖ Backup —Å—Ö–µ–º—ã —Å–æ–∑–¥–∞–Ω$(NC)"

backup-list: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö backup'–æ–≤
	@echo "$(BLUE)üìÇ –°–ø–∏—Å–æ–∫ backup'–æ–≤:$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/backup_database.py list

backup-cleanup: ## –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ backup'—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤...$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/backup_database.py cleanup --keep-days 30 --keep-count 10
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

backup-validate: ## –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å backup —Ñ–∞–π–ª
	@echo "$(BLUE)üîç –í–∞–ª–∏–¥–∞—Ü–∏—è backup...$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è backup —Ñ–∞–π–ª–∞: " backup_file; \
	cd backend && . strain_venv/bin/activate && python scripts/backup_database.py validate --file $$backup_file

restore-db: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ backup
	@echo "$(YELLOW)üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup...$(NC)"
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è backup —Ñ–∞–π–ª–∞: " backup_file; \
	cd backend && . strain_venv/bin/activate && python scripts/restore_database.py $$backup_file

restore-info: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ backup —Ñ–∞–π–ª–µ
	@echo "$(BLUE)‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ backup:$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è backup —Ñ–∞–π–ª–∞: " backup_file; \
	cd backend && . strain_venv/bin/activate && python scripts/restore_database.py $$backup_file --info-only

backup-auto-install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup'—ã (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
	@echo "$(GREEN)‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup'–æ–≤...$(NC)"
	python3 backend/scripts/setup_backup_cron.py install --schedule daily

backup-auto-remove: ## –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup'—ã
	@echo "$(RED)‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup'–æ–≤...$(NC)"
	python3 backend/scripts/setup_backup_cron.py remove

backup-auto-show: ## –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup'–æ–≤
	@echo "$(BLUE)üìÖ –¢–µ–∫—É—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup'—ã:$(NC)"
	python3 backend/scripts/setup_backup_cron.py show

backup-test: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã backup
	@echo "$(BLUE)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã backup...$(NC)"
	python3 backend/scripts/setup_backup_cron.py test

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
backup: backup-create ## –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∞–ª–∏–∞—Å)
restore: restore-db ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–∞–ª–∏–∞—Å)

# ===========================================
# QUICK DEPLOYMENT COMMANDS
# ===========================================

quick-deploy: ## üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç)
	@./deploy.sh

deploy-prod: ## üè≠ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω (–±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
	@echo "$(BLUE)üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω...$(NC)"
	@mkdir -p logs backups data/certbot/conf data/certbot/www
	@docker compose down --remove-orphans || true
	@docker compose up -d --build
	@echo "$(GREEN)‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"
	@echo "$(YELLOW)üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost$(NC)"

deploy-clean: ## üóëÔ∏è –ß–∏—Å—Ç–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (—É–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): " confirm && [ "$$confirm" = "yes" ] || exit 1
	@docker compose down -v --remove-orphans
	@docker system prune -a -f
	@rm -rf logs/* backups/* 
	@./deploy.sh

install: setup db-start migrate import ## –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(GREEN)üéâ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!$(NC)"
	@echo "$(BLUE)–î–æ—Å—Ç—É–ø–Ω—ã–µ URL:$(NC)"
	@echo "- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:8000/admin/"
	@echo "- API: http://localhost:8000/api/"

test-api: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
	@echo "$(BLUE)üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π Pydantic...$(NC)"
	@echo "üìä –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:"
	@curl -s http://localhost:8000/ | python3 -m json.tool || echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "\nüìä API —Å—Ç–∞—Ç—É—Å:"
	@curl -s http://localhost:8000/api/ | python3 -m json.tool || echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:"
	@curl -s http://localhost:8000/api/stats/ | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–®—Ç–∞–º–º—ã: {data[\"counts\"][\"strains\"]}, –û–±—Ä–∞–∑—Ü—ã: {data[\"counts\"][\"samples\"]}, –í–∞–ª–∏–¥–∞—Ü–∏—è: {data[\"validation\"][\"engine\"]}')" || echo "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
	@echo "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):"
	@curl -X POST http://localhost:8000/api/strains/validate/ -H "Content-Type: application/json" -d '{"id": 1, "short_code": "TEST-01", "identifier": "Test strain"}' | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–í–∞–ª–∏–¥–∞—Ü–∏—è: {\"‚úÖ –£—Å–ø–µ—à–Ω–æ\" if data[\"valid\"] else \"‚ùå –û—à–∏–±–∫–∞\"}')" || echo "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
	@echo "\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):"
	@curl -X POST http://localhost:8000/api/strains/validate/ -H "Content-Type: application/json" -d '{"id": -1, "short_code": ""}' | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–í–∞–ª–∏–¥–∞—Ü–∏—è: {\"‚ùå –û—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã (–æ–∂–∏–¥–∞–µ–º–æ)\" if not data[\"valid\"] else \"‚úÖ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω–æ\"}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {len(data.get(\"errors\", []))}')" || echo "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

validate-data: ## –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Pydantic
	@echo "$(BLUE)üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	python3 backend/scripts/validate_data.py

frontend-install: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π React frontend...$(NC)"
	cd frontend && npm install

frontend-dev: ## –ó–∞–ø—É—Å–∫ React frontend –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üé® –ó–∞–ø—É—Å–∫ React frontend –Ω–∞ –ø–æ—Ä—Ç—É 3000...$(NC)"
	cd frontend && npm run dev

frontend-build: ## –°–±–æ—Ä–∫–∞ production –≤–µ—Ä—Å–∏–∏ frontend
	@echo "$(YELLOW)üì¶ –°–±–æ—Ä–∫–∞ production –≤–µ—Ä—Å–∏–∏...$(NC)"
	cd frontend && npm run build

test-search: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
	@echo "$(BLUE)üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...$(NC)"
	@echo "\nüìä –ü–æ–∏—Å–∫ —à—Ç–∞–º–º–æ–≤ –ø–æ Streptomyces:"
	@curl -s "http://localhost:8000/api/strains/?search=Streptomyces&limit=3" | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–ù–∞–π–¥–µ–Ω–æ —à—Ç–∞–º–º–æ–≤: {data[\"total\"]}'); [print(f'  - {s[\"short_code\"]}: {s[\"identifier\"]}') for s in data['strains'][:3]]" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–º–æ–≤"
	@echo "\nüß™ –ü–æ–∏—Å–∫ –æ–±—Ä–∞–∑—Ü–æ–≤ –ø–æ A1:"
	@curl -s "http://localhost:8000/api/samples/?search=A1&limit=3" | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {data[\"total\"]}'); [print(f'  - ID: {s[\"id\"]}, –®—Ç–∞–º–º: {s.get(\"strain\",{}).get(\"short_code\",\"N/A\")}, –Ø—á–µ–π–∫–∞: {s.get(\"storage\",{}).get(\"cell_id\",\"N/A\")}') for s in data['samples'][:3]]" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞–∑—Ü–æ–≤"
	@echo "\nü¶† –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–≥—É–±–∫–∏):"
	@curl -s "http://localhost:8000/api/samples/?source_type=Sponge&limit=3" | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ –≥—É–±–æ–∫: {data[\"total\"]}'); [print(f'  - {s.get(\"source\",{}).get(\"organism_name\",\"N/A\")} ({s.get(\"source\",{}).get(\"source_type\",\"N/A\")})') for s in data['samples'][:3]]" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"
	@echo "\nüåä –ü–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ (Baikal):"
	@curl -s "http://localhost:8000/api/samples/?search=Baikal&limit=3" | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {data[\"total\"]}'); [print(f'  - –õ–æ–∫–∞—Ü–∏—è: {s.get(\"location\",{}).get(\"name\",\"N/A\")}') for s in data['samples'][:3]]" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏–∏"
	@echo "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
test-bulk: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
	@echo "$(BLUE)üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...$(NC)"
	@echo "\nüîÑ –¢–µ—Å—Ç–æ–≤–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ has_photo=true –¥–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤ 1,2):"
	@curl -s -X POST "http://localhost:8000/api/samples/bulk-update/" \
		-H "Content-Type: application/json" \
		-d '{"sample_ids": [1, 2], "update_data": {"has_photo": true}}' | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {data.get(\"updated_count\", \"–æ—à–∏–±–∫–∞\")}'); print(f'–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {data.get(\"updated_fields\", [])}')" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
	@echo "\nüì• –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–≤—ã—Ö 5 –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ CSV:"
	@curl -s "http://localhost:8000/api/samples/export/?sample_ids=1,2,3,4,5" -o test_export.csv && echo "‚úÖ –§–∞–π–ª test_export.csv —Å–æ–∑–¥–∞–Ω" || echo "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
test-analytics: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
	@echo "$(BLUE)üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...$(NC)"
	@echo "\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
	@curl -s "http://localhost:8000/api/stats/" | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–®—Ç–∞–º–º—ã: {data[\"counts\"][\"strains\"]}, –û–±—Ä–∞–∑—Ü—ã: {data[\"counts\"][\"samples\"]}, –•—Ä–∞–Ω–∏–ª–∏—â–∞: {data[\"counts\"][\"storage\"]}')" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
	@echo "\nüè† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Ç–æ–ø 5):"
	@curl -s "http://localhost:8000/api/storage/?limit=5" | python3 -c "import sys,json; data=json.load(sys.stdin); storage=data.get('storage',[]); print(f'–ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫: {data.get(\"total\", 0)}'); [print(f'  - –ë–æ–∫—Å {s[\"box_id\"]}, —è—á–µ–π–∫–∞ {s[\"cell_id\"]}: {\"–ó–∞–Ω—è—Ç–∞\" if s.get(\"is_free_cell\") == False else \"–°–≤–æ–±–æ–¥–Ω–∞\"}') for s in storage[:3]]" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è  
migrate-changelog: ## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	@echo "$(BLUE)üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py migrate

# –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
test-all-new: ## –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
	@echo "$(GREEN)üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...$(NC)"
	make migrate-changelog
	@echo "\n=== –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò ==="
	make test-bulk
	@echo "\n=== –ê–ù–ê–õ–ò–¢–ò–ö–ê ==="
	make test-analytics
	@echo "\n=== –ü–û–ò–°–ö ==="
	make test-search
	@echo "\n$(GREEN)‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!$(NC)"

full-dev: ## –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã (backend + frontend)
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	@echo "Backend –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000"
	@echo "Frontend –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:3000"

# =============================================================================
# DOCKER –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï
# =============================================================================

quick-deploy: ## –ü–æ–ª–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Docker
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Docker...$(NC)"
	@chmod +x scripts/init_deploy.sh
	@./scripts/init_deploy.sh

deploy-prod: ## –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
	@echo "$(BLUE)üè≠ –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ...$(NC)"
	@$(MAKE) docker-down
	@$(MAKE) docker-build
	@$(MAKE) docker-up
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞$(NC)"
	@echo "$(YELLOW)üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost$(NC)"
	@echo "$(YELLOW)üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost/admin/ (admin/admin123)$(NC)"

deploy-dev: ## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üîß –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...$(NC)"; \
		cp env_example .env; \
	fi
	@mkdir -p data/{certbot/conf,certbot/www} backups logs
	@$(MAKE) docker-build
	@$(MAKE) docker-up
	@echo "$(GREEN)‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"

docker-up: ## –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "$(BLUE)üê≥ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	docker compose up -d
	@echo "$(GREEN)‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã$(NC)"

docker-down: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "$(BLUE)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	docker compose down
	@echo "$(GREEN)‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

docker-build: ## –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
	@echo "$(BLUE)üèóÔ∏è  –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker compose build --no-cache
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã$(NC)"

docker-restart: docker-down docker-up ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤

docker-logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker compose logs -f

docker-logs-backend: ## –õ–æ–≥–∏ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	docker compose logs -f backend

docker-logs-frontend: ## –õ–æ–≥–∏ frontend/nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	docker compose logs -f nginx

docker-logs-db: ## –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	docker compose logs -f db

docker-status: ## –°—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(NC)"
	@docker compose ps

docker-health: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Docker —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Docker —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	@echo "$(YELLOW)üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(NC)"
	@docker compose ps
	@echo ""
	@echo "$(YELLOW)üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:$(NC)"
	@curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://localhost || echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "$(YELLOW)üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ API:$(NC)"
	@curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://localhost/api/health/ || echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

docker-clean: ## –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üßπ –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	docker compose down
	@echo "$(GREEN)‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

docker-clean-all: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	docker compose down -v
	docker system prune -f
	@echo "$(GREEN)‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞$(NC)"

docker-import-data: ## –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Docker —Å—Ä–µ–¥–µ
	@echo "$(BLUE)üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Docker —Å—Ä–µ–¥–µ...$(NC)"
	docker compose exec backend python manage.py import_csv_data --table=all
	@echo "$(GREEN)‚úÖ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã$(NC)"

docker-backup: ## –°–æ–∑–¥–∞–Ω–∏–µ backup –≤ Docker —Å—Ä–µ–¥–µ
	@echo "$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup –≤ Docker —Å—Ä–µ–¥–µ...$(NC)"
	docker compose exec -T db pg_dump -U strain_user strain_db | gzip > backups/docker_backup_$(shell date +%Y-%m-%d_%H-%M-%S).sql.gz
	@echo "$(GREEN)‚úÖ Backup —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ backups/$(NC)"

docker-info: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
	@echo "$(BLUE)üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:$(NC)"
	@echo ""
	@echo "$(GREEN)üåê URL –∞–¥—Ä–µ—Å–∞:$(NC)"
	@echo "  –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost"
	@echo "  –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost/admin/"
	@echo "  API: http://localhost/api/"
	@echo ""
	@echo "$(GREEN)üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:$(NC)"
	@docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@echo "$(GREEN)üíæ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:$(NC)"
	@echo "  –ë—ç–∫–∞–ø—ã: ./backups/"
	@echo "  –î–∞–Ω–Ω—ã–µ: ./data/"
	@echo "  –õ–æ–≥–∏: ./logs/" 

# =============================================================================
# –†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò (—Ç–æ–ª—å–∫–æ –ë–î –≤ Docker)
# =============================================================================

dev-setup: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –ë–î –≤ Docker)
	@echo "$(GREEN)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@echo "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	@cp env_dev_example .env.dev || echo "–§–∞–π–ª .env.dev —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
	@echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã –¥–ª—è backend..."
	@cd backend && python3 -m venv strain_venv
	@echo "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend..."
	@cd backend && . strain_venv/bin/activate && pip install -r requirements.txt
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend..."
	@cd frontend && npm install
	@echo "üêò –ó–∞–ø—É—Å–∫ PostgreSQL –≤ Docker..."
	@docker compose -f docker compose.dev.yml up -d
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	@sleep 10
	@echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
	@cd backend && . strain_venv/bin/activate && python manage.py migrate
	@echo "üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö..."
	@cd backend && . strain_venv/bin/activate && python scripts/import_data.py || echo "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
	@echo "$(GREEN)‚úÖ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!$(NC)"
	@echo ""
	@echo "$(BLUE)üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:$(NC)"
	@echo "  make dev-start  # –ó–∞–ø—É—Å—Ç–∏—Ç—å backend + frontend"

dev-start: ## –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (backend + frontend)
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@echo "üêò –ó–∞–ø—É—Å–∫ PostgreSQL..."
	@docker compose -f docker compose.dev.yml up -d
	@echo ""
	@echo "$(BLUE)üîß Backend –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8000$(NC)"
	@echo "$(BLUE)üé® Frontend –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:3000$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö:$(NC)"
	@echo "  $(GREEN)make dev-backend$(NC)   # –î–ª—è Django backend"
	@echo "  $(GREEN)make dev-frontend$(NC)  # –î–ª—è React frontend"

dev-backend: ## –ó–∞–ø—É—Å–∫ Django backend –ª–æ–∫–∞–ª—å–Ω–æ (–ø–æ—Ä—Ç 8000)
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ Django backend –Ω–∞ –ø–æ—Ä—Ç—É 8000...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py runserver 0.0.0.0:8000

dev-frontend: ## –ó–∞–ø—É—Å–∫ React frontend –ª–æ–∫–∞–ª—å–Ω–æ (–ø–æ—Ä—Ç 3000)
	@echo "$(GREEN)üé® –ó–∞–ø—É—Å–∫ React frontend –Ω–∞ –ø–æ—Ä—Ç—É 3000...$(NC)"
	cd frontend && npm run dev

dev-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(RED)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@docker compose -f docker compose.dev.yml down
	@echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞$(NC)"
	@echo "$(YELLOW)üí° Backend –∏ frontend –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é (Ctrl+C)$(NC)"

dev-status: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:$(NC)"
	@echo ""
	@echo "$(GREEN)üêò PostgreSQL (Docker):$(NC)"
	@docker compose -f docker compose.dev.yml ps
	@echo ""
	@echo "$(GREEN)üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:$(NC)"
	@echo -n "  Backend (8000): "
	@curl -s -o /dev/null -w "HTTP %{http_code}" http://localhost:8000/api/health/ || echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo ""
	@echo -n "  Frontend (3000): "
	@curl -s -o /dev/null -w "HTTP %{http_code}" http://localhost:3000 || echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo ""

dev-reset: ## –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ—á–∏—Å—Ç–∫–∞ –ë–î)
	@echo "$(YELLOW)‚ö†Ô∏è  –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@docker compose -f docker compose.dev.yml down -v
	@echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞$(NC)"
	@echo "$(BLUE)üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make dev-setup' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏$(NC)"

dev-db-shell: ## –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ psql
	@echo "$(BLUE)üêò –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...$(NC)"
	@docker compose -f docker compose.dev.yml exec postgres psql -U strain_user -d strain_collection

dev-logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ PostgreSQL
	@docker compose -f docker compose.dev.yml logs -f postgres

dev-admin: ## –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py createsuperuser

dev-migrate: ## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py makemigrations
	cd backend && . strain_venv/bin/activate && python manage.py migrate

dev-import: ## –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/import_data.py

dev-test: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py test

dev-info: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üìã –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:$(NC)"
	@echo ""
	@echo "$(GREEN)üéØ –ö–û–ù–¶–ï–ü–¶–ò–Ø:$(NC)"
	@echo "  ‚Ä¢ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Docker (–ø–æ—Ä—Ç 5432)"
	@echo "  ‚Ä¢ Django backend –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ (–ø–æ—Ä—Ç 8000)"
	@echo "  ‚Ä¢ React frontend –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ (–ø–æ—Ä—Ç 3000)"
	@echo ""
	@echo "$(GREEN)‚ö° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:$(NC)"
	@echo "  ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"
	@echo "  ‚Ä¢ Live reload –¥–ª—è React"
	@echo "  ‚Ä¢ Django auto-reload –¥–ª—è backend"
	@echo "  ‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–ª–∞–¥–∫–µ"
	@echo ""
	@echo "$(GREEN)üõ†Ô∏è  –ö–û–ú–ê–ù–î–´:$(NC)"
	@echo "  $(YELLOW)make dev-setup$(NC)    - –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
	@echo "  $(YELLOW)make dev-start$(NC)    - –ó–∞–ø—É—Å–∫ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)"
	@echo "  $(YELLOW)make dev-backend$(NC)  - Django backend (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª)"
	@echo "  $(YELLOW)make dev-frontend$(NC) - React frontend (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª)"
	@echo "  $(YELLOW)make dev-status$(NC)   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
	@echo "  $(YELLOW)make dev-stop$(NC)     - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL"
	@echo ""
	@echo "$(GREEN)üåê URL –ê–î–†–ï–°–ê:$(NC)"
	@echo "  Backend API: http://localhost:8000/api/"
	@echo "  Frontend: http://localhost:3000"
	@echo "  –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:8000/admin/"
	@echo "  pgAdmin: http://localhost:8080 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"

# =============================================================================
# DOCKER HUB –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï
# =============================================================================

build-images: ## –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤ –≤ Docker Hub
	@echo "$(BLUE)üê≥ –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤ –≤ Docker Hub...$(NC)"
	@chmod +x build_and_push_images.sh
	@./build_and_push_images.sh

create-ultra-minimal: ## –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ (Docker Hub)
	@echo "$(BLUE)üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ (Docker Hub)...$(NC)"
	@chmod +x create_ultra_minimal_deploy.sh
	@./create_ultra_minimal_deploy.sh

deploy-hub: ## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏–∑ Docker Hub
	@echo "$(BLUE)üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏–∑ Docker Hub...$(NC)"
	@chmod +x deploy_hub.sh
	@./deploy_hub.sh

hub-info: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker Hub —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
	@echo "$(BLUE)üìã Docker Hub —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:$(NC)"
	@echo ""
	@echo "$(GREEN)üéØ –ö–û–ù–¶–ï–ü–¶–ò–Ø:$(NC)"
	@echo "  ‚Ä¢ –û–±—Ä–∞–∑—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ Docker Hub"
	@echo "  ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–æ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ: docker compose.yml + –¥–∞–Ω–Ω—ã–µ + .env"
	@echo "  ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ~2MB (–≤–º–µ—Å—Ç–æ 47MB)"
	@echo ""
	@echo "$(GREEN)‚ö° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:$(NC)"
	@echo "  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
	@echo "  ‚Ä¢ –û–±—Ä–∞–∑—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
	@echo "  ‚Ä¢ –í—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"
	@echo "  ‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: docker compose pull"
	@echo ""
	@echo "$(GREEN)üõ†Ô∏è  –ö–û–ú–ê–ù–î–´:$(NC)"
	@echo "  $(YELLOW)make build-images$(NC)         - –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Docker Hub"
	@echo "  $(YELLOW)make create-ultra-minimal$(NC) - –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ ~2MB"
	@echo "  $(YELLOW)make deploy-hub$(NC)           - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏–∑ Docker Hub"
	@echo ""
	@echo "$(GREEN)üì¶ –ü–†–û–¶–ï–°–°:$(NC)"
	@echo "  1. –°–±–æ—Ä–∫–∞: make build-images"
	@echo "  2. –ü–∞–∫–µ—Ç: make create-ultra-minimal"
	@echo "  3. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ strain_ultra_minimal.tar.gz –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
	@echo "  4. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: ./deploy_hub.sh"
	@echo ""
	@echo "$(GREEN)üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ê–ó–ú–ï–†–û–í:$(NC)"
	@echo "  –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç:        102MB"
	@echo "  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç:    47MB"
	@echo "  –£–ª—å—Ç—Ä–∞-–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π:   ~2MB ‚≠ê"

# =============================================================================
# FRONTEND MANAGEMENT COMMANDS
# =============================================================================

frontend-build: ## üé® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
	@echo "$(BLUE)üé® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...$(NC)"
	@echo "üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å–±–æ—Ä–∫–∏..."
	cd frontend && rm -rf dist
	@echo "üî® –°–±–æ—Ä–∫–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏..."
	cd frontend && npm run build
	@echo "$(GREEN)‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏$(NC)"

frontend-deploy: frontend-build ## üöÄ –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ Docker
	@echo "$(BLUE)üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ Docker...$(NC)"
	@echo "üê≥ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ nginx –æ–±—Ä–∞–∑–∞..."
	docker compose build nginx
	@echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
	docker compose restart nginx
	@echo "$(GREEN)‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Docker!$(NC)"
	@echo "$(YELLOW)üí° –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (Ctrl+F5)$(NC)"

frontend-dev: ## üîß –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ dev —Ä–µ–∂–∏–º–µ
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@echo "$(YELLOW)üí° –§—Ä–æ–Ω—Ç–µ–Ω–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:3000$(NC)"
	@echo "$(YELLOW)üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏$(NC)"
	cd frontend && npm run dev

frontend-check: ## üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...$(NC)"
	@echo "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞—Ö:"
	@find frontend/src -name "*.tsx" -o -name "*.ts" -o -name "*.css" | head -5 | xargs ls -la --time-style=long-iso | awk '{print "  " $$6 " " $$7 " " $$8}'
	@echo "üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏ dist:"
	@ls -la --time-style=long-iso frontend/dist/ 2>/dev/null | head -2 | tail -1 | awk '{print "  " $$6 " " $$7 " dist/"}'
	@echo "üîç –°—Ç–∞—Ç—É—Å git (–Ω–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è):"
	@git status --porcelain frontend/src/ | head -5 | sed 's/^/  /'
	@echo "$(YELLOW)üí° –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'make frontend-deploy'$(NC)"

frontend-info: ## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
	@echo "$(BLUE)üìã –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –¥–∏–∑–∞–π–Ω–æ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:$(NC)"
	@echo ""
	@echo "$(RED)üö® –ü–†–û–ë–õ–ï–ú–ê:$(NC)"
	@echo "  ‚Ä¢ –í dev —Ä–µ–∂–∏–º–µ (npm run dev) –¥–∏–∑–∞–π–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"
	@echo "  ‚Ä¢ –ü–æ—Å–ª–µ npm run build + Docker restart –¥–∏–∑–∞–π–Ω –º–µ–Ω—è–µ—Ç—Å—è"
	@echo "  ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: –¥–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –∏ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"
	@echo ""
	@echo "$(GREEN)‚úÖ –†–ï–®–ï–ù–ò–ï:$(NC)"
	@echo "  1. $(YELLOW)make frontend-check$(NC)  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"
	@echo "  2. $(YELLOW)make frontend-deploy$(NC) - –û–±–Ω–æ–≤–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ Docker"
	@echo "  3. –û–±–Ω–æ–≤–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä (Ctrl+F5)"
	@echo ""
	@echo "$(GREEN)üîß –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:$(NC)"
	@echo "  ‚Ä¢ Docker nginx –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ frontend/dist/ –≤ –æ–±—Ä–∞–∑"
	@echo "  ‚Ä¢ –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å dist/"
	@echo "  ‚Ä¢ –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑ nginx"
	@echo ""
	@echo "$(GREEN)üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:$(NC)"
	@echo "  ‚Ä¢ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'make dev-frontend'"
	@echo "  ‚Ä¢ –ü–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–π—Ç–µ 'make frontend-deploy'"
	@echo "  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å 'make frontend-check'"

# =============================================================================
# REMOTE SERVER UPDATE COMMANDS
# =============================================================================

update-docker-hub: ## üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –Ω–∞ Docker Hub
	@echo "$(BLUE)üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –Ω–∞ Docker Hub...$(NC)"
	@./scripts/update_docker_hub.sh

update-remote: ## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (4feb)
	@echo "$(BLUE)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	@./scripts/update_remote_server.sh

# –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ -> Docker Hub -> —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
full-update: frontend-build ## üöÄ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ª–æ–∫–∞–ª—å–Ω–æ -> Docker Hub -> —Å–µ—Ä–≤–µ—Ä)
	@echo "$(BLUE)üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	@echo "$(GREEN)üìù –≠—Ç–∞–ø—ã:$(NC)"
	@echo "  1. ‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω"
	@echo "  2. üîÑ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
	@docker build -t gimmyhat/strain-collection-backend:latest -f backend/Dockerfile backend/
	@docker build -t gimmyhat/strain-collection-frontend:latest -f frontend/Dockerfile frontend/
	@echo "  3. üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Docker Hub..."
	@./scripts/update_docker_hub.sh || (echo "$(RED)‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Docker Hub. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: docker login --username gimmyhat$(NC)" && exit 1)
	@echo "  4. üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞..."
	@./scripts/update_remote_server.sh
	@echo "$(GREEN)üéâ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!$(NC)"

remote-status: ## üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (4feb):$(NC)"
	@ssh 4feb "cd ~/strain_ultra_minimal && echo 'üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:' && docker compose ps"
	@echo ""
	@ssh 4feb "cd ~/strain_ultra_minimal && echo 'üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:' && df -h ."
	@echo ""
	@ssh 4feb "cd ~/strain_ultra_minimal && echo 'üê≥ Docker –æ–±—Ä–∞–∑—ã:' && docker images | grep strain-collection"

remote-logs: ## üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
	@echo "$(BLUE)üìù –õ–æ–≥–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:$(NC)"
	@ssh 4feb "cd ~/strain_ultra_minimal && docker compose logs --tail=20"

remote-restart: ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ...$(NC)"
	@ssh 4feb "cd ~/strain_ultra_minimal && docker compose restart"
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã$(NC)"

# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π
auto-deploy: ## ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π)
	@echo "$(BLUE)ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è...$(NC)"
	@./scripts/auto_deploy.sh

auto-deploy-force: ## ‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)
	@echo "$(BLUE)‚ö° –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è...$(NC)"
	@./scripts/auto_deploy.sh --force

auto-deploy-fast: ## üöÄ –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π (–±–µ–∑ —Ç–µ—Å—Ç–æ–≤)
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è...$(NC)"
	@./scripts/auto_deploy.sh --force --skip-tests

setup-git-hooks: ## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks –¥–ª—è –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è
	@echo "$(BLUE)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks...$(NC)"
	@./scripts/setup_git_hooks.sh

update-info: ## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	@echo "$(BLUE)üìã –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è strain-collection:$(NC)"
	@echo ""
	@echo "$(GREEN)üéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:$(NC)"
	@echo "  ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: dev —Ä–µ–∂–∏–º"
	@echo "  ‚Ä¢ Docker Hub: —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤"
	@echo "  ‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (4feb): –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
	@echo ""
	@echo "$(GREEN)üîÑ –ü–†–û–¶–ï–°–° –û–ë–ù–û–í–õ–ï–ù–ò–Ø:$(NC)"
	@echo "  1. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥/–±—ç–∫–µ–Ω–¥)"
	@echo "  2. –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: make frontend-build"
	@echo "  3. –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ"
	@echo "  4. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –Ω–∞ Docker Hub"
	@echo "  5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"
	@echo ""
	@echo "$(GREEN)ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –î–ï–ü–õ–û–ô:$(NC)"
	@echo "  $(YELLOW)make auto-deploy$(NC)       - –ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)"
	@echo "  $(YELLOW)make auto-deploy-force$(NC) - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π"
	@echo "  $(YELLOW)make auto-deploy-fast$(NC)  - –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π (–±–µ–∑ —Ç–µ—Å—Ç–æ–≤)"
	@echo "  $(YELLOW)make setup-git-hooks$(NC)   - Git hooks –¥–ª—è –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è"
	@echo ""
	@echo "$(GREEN)üõ†Ô∏è  –†–£–ß–ù–´–ï –ö–û–ú–ê–ù–î–´:$(NC)"
	@echo "  $(YELLOW)make full-update$(NC)        - –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤—Å–µ —ç—Ç–∞–ø—ã)"
	@echo "  $(YELLOW)make update-docker-hub$(NC)  - –¢–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Docker Hub"
	@echo "  $(YELLOW)make update-remote$(NC)      - –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"
	@echo "  $(YELLOW)make remote-status$(NC)      - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"
	@echo "  $(YELLOW)make remote-logs$(NC)        - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"
	@echo ""
	@echo "$(GREEN)üìã –¢–†–ï–ë–û–í–ê–ù–ò–Ø:$(NC)"
	@echo "  ‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Docker Hub: docker login --username gimmyhat"
	@echo "  ‚Ä¢ SSH –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É: ssh 4feb"
	@echo "  ‚Ä¢ –ü–∞–ø–∫–∞ ~/strain_ultra_minimal –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
	@echo ""
	@echo "$(GREEN)üåê –ê–î–†–ï–°–ê:$(NC)"
	@echo "  ‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: http://89.169.171.236:8081"
	@echo "  ‚Ä¢ Docker Hub: https://hub.docker.com/r/gimmyhat/"