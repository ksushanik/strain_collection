# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —É—á–µ—Ç–∞ —à—Ç–∞–º–º–æ–≤ –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤

.PHONY: help setup start stop restart import clean test

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(BLUE)–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ —à—Ç–∞–º–º–æ–≤ –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤$(NC)"
	@echo "=================================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-15s$(NC) %s\n", $$1, $$2}'

setup: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(GREEN)üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	@echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã..."
	cd backend && python3 -m venv strain_venv
	@echo "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	cd backend && . strain_venv/bin/activate && pip install -r requirements.txt
	@echo "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	cd backend && cp env_example .env || true
	@echo "$(GREEN)‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"

db-start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	@echo "$(GREEN)üêò –ó–∞–ø—É—Å–∫ PostgreSQL...$(NC)"
	docker-compose up -d
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	sleep 10

db-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	@echo "$(RED)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL...$(NC)"
	docker-compose down

db-restart: db-stop db-start ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL

migrate: ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ Django
	@echo "$(BLUE)üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py makemigrations
	cd backend && . strain_venv/bin/activate && python manage.py migrate

import: ## –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤
	@echo "$(GREEN)üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV...$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/import_data.py

start: db-start migrate ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Django —Å–µ—Ä–≤–µ—Ä
	@echo "$(GREEN)üåü –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py runserver 0.0.0.0:8000

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py runserver

admin: ## –°–æ–∑–¥–∞—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	@echo "$(BLUE)üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py createsuperuser

shell: ## –û—Ç–∫—Ä—ã—Ç—å Django shell
	cd backend && . strain_venv/bin/activate && python manage.py shell

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py test

clean-db: ## –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	@echo "$(RED)üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py shell -c "from collection_manager.models import *; Sample.objects.all().delete(); Strain.objects.all().delete(); Storage.objects.all().delete(); print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞')"

full-import: clean-db import ## –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	@echo "$(GREEN)üîÑ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ PostgreSQL
	docker-compose logs -f db

status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:$(NC)"
	@echo "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
	docker-compose ps
	@echo "\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
	cd backend && . strain_venv/bin/activate && python manage.py shell -c "from collection_manager.models import *; print(f'–®—Ç–∞–º–º—ã: {Strain.objects.count()}'); print(f'–û–±—Ä–∞–∑—Ü—ã: {Sample.objects.count()}'); print(f'–•—Ä–∞–Ω–∏–ª–∏—â–∞: {Storage.objects.count()}')"

# === BACKUP –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï ===

backup-create: ## –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(YELLOW)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ backup...$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/backup_database.py create --type full
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω—ã–π backup —Å–æ–∑–¥–∞–Ω$(NC)"

backup-schema: ## –°–æ–∑–¥–∞—Ç—å backup —Ç–æ–ª—å–∫–æ —Å—Ö–µ–º—ã –ë–î
	@echo "$(YELLOW)üìã –°–æ–∑–¥–∞–Ω–∏–µ backup —Å—Ö–µ–º—ã...$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/backup_database.py create --type schema
	@echo "$(GREEN)‚úÖ Backup —Å—Ö–µ–º—ã —Å–æ–∑–¥–∞–Ω$(NC)"

backup-list: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö backup'–æ–≤
	@echo "$(BLUE)üìÇ –°–ø–∏—Å–æ–∫ backup'–æ–≤:$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/backup_database.py list

backup-cleanup: ## –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ backup'—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤...$(NC)"
	cd backend && . strain_venv/bin/activate && python scripts/backup_database.py cleanup --keep-days 30 --keep-count 10
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

backup-validate: ## –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å backup —Ñ–∞–π–ª
	@echo "$(BLUE)üîç –í–∞–ª–∏–¥–∞—Ü–∏—è backup...$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è backup —Ñ–∞–π–ª–∞: " backup_file; \
	cd backend && . strain_venv/bin/activate && python scripts/backup_database.py validate --file $$backup_file

restore-db: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ backup
	@echo "$(YELLOW)üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup...$(NC)"
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è backup —Ñ–∞–π–ª–∞: " backup_file; \
	cd backend && . strain_venv/bin/activate && python scripts/restore_database.py $$backup_file

restore-info: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ backup —Ñ–∞–π–ª–µ
	@echo "$(BLUE)‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ backup:$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è backup —Ñ–∞–π–ª–∞: " backup_file; \
	cd backend && . strain_venv/bin/activate && python scripts/restore_database.py $$backup_file --info-only

backup-auto-install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup'—ã (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
	@echo "$(GREEN)‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup'–æ–≤...$(NC)"
	python3 backend/scripts/setup_backup_cron.py install --schedule daily

backup-auto-remove: ## –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup'—ã
	@echo "$(RED)‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup'–æ–≤...$(NC)"
	python3 backend/scripts/setup_backup_cron.py remove

backup-auto-show: ## –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö backup'–æ–≤
	@echo "$(BLUE)üìÖ –¢–µ–∫—É—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup'—ã:$(NC)"
	python3 backend/scripts/setup_backup_cron.py show

backup-test: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã backup
	@echo "$(BLUE)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã backup...$(NC)"
	python3 backend/scripts/setup_backup_cron.py test

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
backup: backup-create ## –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∞–ª–∏–∞—Å)
restore: restore-db ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–∞–ª–∏–∞—Å)

install: setup db-start migrate import ## –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(GREEN)üéâ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!$(NC)"
	@echo "$(BLUE)–î–æ—Å—Ç—É–ø–Ω—ã–µ URL:$(NC)"
	@echo "- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:8000/admin/"
	@echo "- API: http://localhost:8000/api/"

test-api: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
	@echo "$(BLUE)üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π Pydantic...$(NC)"
	@echo "üìä –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:"
	@curl -s http://localhost:8000/ | python3 -m json.tool || echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "\nüìä API —Å—Ç–∞—Ç—É—Å:"
	@curl -s http://localhost:8000/api/ | python3 -m json.tool || echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:"
	@curl -s http://localhost:8000/api/stats/ | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–®—Ç–∞–º–º—ã: {data[\"counts\"][\"strains\"]}, –û–±—Ä–∞–∑—Ü—ã: {data[\"counts\"][\"samples\"]}, –í–∞–ª–∏–¥–∞—Ü–∏—è: {data[\"validation\"][\"engine\"]}')" || echo "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
	@echo "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):"
	@curl -X POST http://localhost:8000/api/strains/validate/ -H "Content-Type: application/json" -d '{"id": 1, "short_code": "TEST-01", "identifier": "Test strain"}' | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–í–∞–ª–∏–¥–∞—Ü–∏—è: {\"‚úÖ –£—Å–ø–µ—à–Ω–æ\" if data[\"valid\"] else \"‚ùå –û—à–∏–±–∫–∞\"}')" || echo "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
	@echo "\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):"
	@curl -X POST http://localhost:8000/api/strains/validate/ -H "Content-Type: application/json" -d '{"id": -1, "short_code": ""}' | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–í–∞–ª–∏–¥–∞—Ü–∏—è: {\"‚ùå –û—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã (–æ–∂–∏–¥–∞–µ–º–æ)\" if not data[\"valid\"] else \"‚úÖ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω–æ\"}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {len(data.get(\"errors\", []))}')" || echo "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

validate-data: ## –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Pydantic
	@echo "$(BLUE)üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	python3 backend/scripts/validate_data.py

frontend-install: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π React frontend...$(NC)"
	cd frontend && npm install

frontend-dev: ## –ó–∞–ø—É—Å–∫ React frontend –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üé® –ó–∞–ø—É—Å–∫ React frontend –Ω–∞ –ø–æ—Ä—Ç—É 3000...$(NC)"
	cd frontend && npm run dev

frontend-build: ## –°–±–æ—Ä–∫–∞ production –≤–µ—Ä—Å–∏–∏ frontend
	@echo "$(YELLOW)üì¶ –°–±–æ—Ä–∫–∞ production –≤–µ—Ä—Å–∏–∏...$(NC)"
	cd frontend && npm run build

test-search: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
	@echo "$(BLUE)üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...$(NC)"
	@echo "\nüìä –ü–æ–∏—Å–∫ —à—Ç–∞–º–º–æ–≤ –ø–æ Streptomyces:"
	@curl -s "http://localhost:8000/api/strains/?search=Streptomyces&limit=3" | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–ù–∞–π–¥–µ–Ω–æ —à—Ç–∞–º–º–æ–≤: {data[\"total\"]}'); [print(f'  - {s[\"short_code\"]}: {s[\"identifier\"]}') for s in data['strains'][:3]]" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–º–æ–≤"
	@echo "\nüß™ –ü–æ–∏—Å–∫ –æ–±—Ä–∞–∑—Ü–æ–≤ –ø–æ A1:"
	@curl -s "http://localhost:8000/api/samples/?search=A1&limit=3" | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {data[\"total\"]}'); [print(f'  - ID: {s[\"id\"]}, –®—Ç–∞–º–º: {s.get(\"strain\",{}).get(\"short_code\",\"N/A\")}, –Ø—á–µ–π–∫–∞: {s.get(\"storage\",{}).get(\"cell_id\",\"N/A\")}') for s in data['samples'][:3]]" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞–∑—Ü–æ–≤"
	@echo "\nü¶† –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–≥—É–±–∫–∏):"
	@curl -s "http://localhost:8000/api/samples/?source_type=Sponge&limit=3" | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ –≥—É–±–æ–∫: {data[\"total\"]}'); [print(f'  - {s.get(\"source\",{}).get(\"organism_name\",\"N/A\")} ({s.get(\"source\",{}).get(\"source_type\",\"N/A\")})') for s in data['samples'][:3]]" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"
	@echo "\nüåä –ü–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ (Baikal):"
	@curl -s "http://localhost:8000/api/samples/?search=Baikal&limit=3" | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {data[\"total\"]}'); [print(f'  - –õ–æ–∫–∞—Ü–∏—è: {s.get(\"location\",{}).get(\"name\",\"N/A\")}') for s in data['samples'][:3]]" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏–∏"
	@echo "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
test-bulk: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
	@echo "$(BLUE)üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...$(NC)"
	@echo "\nüîÑ –¢–µ—Å—Ç–æ–≤–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ has_photo=true –¥–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤ 1,2):"
	@curl -s -X POST "http://localhost:8000/api/samples/bulk-update/" \
		-H "Content-Type: application/json" \
		-d '{"sample_ids": [1, 2], "update_data": {"has_photo": true}}' | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {data.get(\"updated_count\", \"–æ—à–∏–±–∫–∞\")}'); print(f'–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {data.get(\"updated_fields\", [])}')" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
	@echo "\nüì• –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–≤—ã—Ö 5 –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ CSV:"
	@curl -s "http://localhost:8000/api/samples/export/?sample_ids=1,2,3,4,5" -o test_export.csv && echo "‚úÖ –§–∞–π–ª test_export.csv —Å–æ–∑–¥–∞–Ω" || echo "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
test-analytics: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
	@echo "$(BLUE)üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...$(NC)"
	@echo "\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
	@curl -s "http://localhost:8000/api/stats/" | python3 -c "import sys,json; data=json.load(sys.stdin); print(f'–®—Ç–∞–º–º—ã: {data[\"counts\"][\"strains\"]}, –û–±—Ä–∞–∑—Ü—ã: {data[\"counts\"][\"samples\"]}, –•—Ä–∞–Ω–∏–ª–∏—â–∞: {data[\"counts\"][\"storage\"]}')" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
	@echo "\nüè† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Ç–æ–ø 5):"
	@curl -s "http://localhost:8000/api/storage/?limit=5" | python3 -c "import sys,json; data=json.load(sys.stdin); storage=data.get('storage',[]); print(f'–ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫: {data.get(\"total\", 0)}'); [print(f'  - –ë–æ–∫—Å {s[\"box_id\"]}, —è—á–µ–π–∫–∞ {s[\"cell_id\"]}: {\"–ó–∞–Ω—è—Ç–∞\" if s.get(\"is_free_cell\") == False else \"–°–≤–æ–±–æ–¥–Ω–∞\"}') for s in storage[:3]]" 2>/dev/null || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è  
migrate-changelog: ## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	@echo "$(BLUE)üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...$(NC)"
	cd backend && . strain_venv/bin/activate && python manage.py migrate

# –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
test-all-new: ## –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
	@echo "$(GREEN)üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...$(NC)"
	make migrate-changelog
	@echo "\n=== –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò ==="
	make test-bulk
	@echo "\n=== –ê–ù–ê–õ–ò–¢–ò–ö–ê ==="
	make test-analytics
	@echo "\n=== –ü–û–ò–°–ö ==="
	make test-search
	@echo "\n$(GREEN)‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!$(NC)"

full-dev: ## –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã (backend + frontend)
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	@echo "Backend –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000"
	@echo "Frontend –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:3000" 